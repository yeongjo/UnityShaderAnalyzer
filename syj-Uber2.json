[
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nmediump vec2 u_xlat16_2;\nuint u_xlatu9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu9 = uint(_UvType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat2.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 1:\n            u_xlat2.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 2:\n            u_xlat2.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        default:\n            u_xlat16_2.x = float(0.0);\n            u_xlat16_2.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_2.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_LOW \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 25\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    0.00       LS\nShortest path cycles:        0.54   16.00    0.00       LS\nLongest path cycles:         0.71   16.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nuint u_xlatu0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat4;\nmediump vec2 u_xlat16_4;\nfloat u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat5 = float(uint(gl_InstanceID));\n    u_xlat10 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat5 * u_xlat0.x + u_xlat10;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu0 = uint(_UvType);\n    switch(int(u_xlatu0)){\n        case 0:\n            u_xlat4.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 1:\n            u_xlat4.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 2:\n            u_xlat4.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        default:\n            u_xlat16_4.x = float(0.0);\n            u_xlat16_4.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_4.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 38\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    1.50       LS\nShortest path cycles:        0.54   16.00    1.50       LS\nLongest path cycles:         0.71   16.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nmediump vec2 u_xlat16_2;\nuint u_xlatu9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu9 = uint(_UvType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat2.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 1:\n            u_xlat2.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 2:\n            u_xlat2.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        default:\n            u_xlat16_2.x = float(0.0);\n            u_xlat16_2.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_2.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_LOW \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 25\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    0.00       LS\nShortest path cycles:        0.54   16.00    0.00       LS\nLongest path cycles:         0.71   16.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nuint u_xlatu0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat4;\nmediump vec2 u_xlat16_4;\nfloat u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat5 = float(uint(gl_InstanceID));\n    u_xlat10 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat5 * u_xlat0.x + u_xlat10;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu0 = uint(_UvType);\n    switch(int(u_xlatu0)){\n        case 0:\n            u_xlat4.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 1:\n            u_xlat4.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 2:\n            u_xlat4.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        default:\n            u_xlat16_4.x = float(0.0);\n            u_xlat16_4.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_4.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_LOW \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 38\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    1.50       LS\nShortest path cycles:        0.54   16.00    1.50       LS\nLongest path cycles:         0.71   16.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nmediump vec2 u_xlat16_2;\nuint u_xlatu9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu9 = uint(_UvType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat2.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 1:\n            u_xlat2.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 2:\n            u_xlat2.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        default:\n            u_xlat16_2.x = float(0.0);\n            u_xlat16_2.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_2.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 25\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    0.00       LS\nShortest path cycles:        0.54   16.00    0.00       LS\nLongest path cycles:         0.71   16.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nuint u_xlatu0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat4;\nmediump vec2 u_xlat16_4;\nfloat u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat5 = float(uint(gl_InstanceID));\n    u_xlat10 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat5 * u_xlat0.x + u_xlat10;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu0 = uint(_UvType);\n    switch(int(u_xlatu0)){\n        case 0:\n            u_xlat4.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 1:\n            u_xlat4.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 2:\n            u_xlat4.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        default:\n            u_xlat16_4.x = float(0.0);\n            u_xlat16_4.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_4.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 38\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    1.50       LS\nShortest path cycles:        0.54   16.00    1.50       LS\nLongest path cycles:         0.71   16.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nmediump vec2 u_xlat16_2;\nuint u_xlatu9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu9 = uint(_UvType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat2.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 1:\n            u_xlat2.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        case 2:\n            u_xlat2.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_2.xy = u_xlat2.xy;\n            break;\n        default:\n            u_xlat16_2.x = float(0.0);\n            u_xlat16_2.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_2.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 25\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    0.00       LS\nShortest path cycles:        0.54   16.00    0.00       LS\nLongest path cycles:         0.71   16.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout mediump vec3 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nuint u_xlatu0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat4;\nmediump vec2 u_xlat16_4;\nfloat u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat5 = float(uint(gl_InstanceID));\n    u_xlat10 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat5 * u_xlat0.x + u_xlat10;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlatu0 = uint(_UvType);\n    switch(int(u_xlatu0)){\n        case 0:\n            u_xlat4.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 1:\n            u_xlat4.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        case 2:\n            u_xlat4.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_4.xy = u_xlat4.xy;\n            break;\n        default:\n            u_xlat16_4.x = float(0.0);\n            u_xlat16_4.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_4.xy;\n    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(4) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec2 u_xlat2;\nmediump vec4 u_xlat16_2;\nuint u_xlatu2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec2 u_xlat6;\nbool u_xlatb6;\nmediump vec2 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nmediump vec2 u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_17;\nmediump float u_xlat16_22;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0.x = texture(_BaseMap, vs_TEXCOORD0.xy).x;\n#ifdef UNITY_ADRENO_ES3\n        { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture); u_xlat16_0.y = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n        u_xlat16_0.y = uintBitsToFloat((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture)) ? 0xFFFFFFFFu : uint(0));\n#endif\n        if(floatBitsToUint(u_xlat16_0.y) != uint(0)) {\n            u_xlat16_7.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n            u_xlat16_1.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_1.x = u_xlat16_7.y * 0.400000006 + u_xlat16_1.x;\n            u_xlat16_1.x = u_xlat16_1.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);\n#else\n            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_0.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_1.x * u_xlat16_22 + u_xlat16_0.x;\n            u_xlat16_7.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_7.y * 0.400000006 + u_xlat16_1.y;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_22 = (-u_xlat16_1.x) + u_xlat16_7.x;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_22 + u_xlat16_1.x;\n            u_xlat16_0.yz = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n            u_xlat16_8 = u_xlat16_0.z * 0.400000006 + u_xlat16_1.z;\n            u_xlat16_8 = u_xlat16_8 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);\n#else\n            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n#endif\n            u_xlat16_15 = (-u_xlat16_1.x) + u_xlat16_0.y;\n            u_xlat16_1.x = u_xlat16_8 * u_xlat16_15 + u_xlat16_1.x;\n        } else {\n            u_xlat16_1.x = u_xlat16_0.x;\n        }\n        u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb2 = !!(_TextureMode==3.0);\n#else\n        u_xlatb2 = _TextureMode==3.0;\n#endif\n        if(u_xlatb2){\n            u_xlat16_2.xy = texture(_BaseMap, vs_TEXCOORD0.xy).xw;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb16){\n                u_xlat16_16.xy = texture(_BaseMap2, vs_TEXCOORD0.xy).xw;\n                u_xlat16_3.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.x;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_3.xw = (-u_xlat16_2.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xw = vec2(u_xlat16_22) * u_xlat16_3.xw + u_xlat16_2.xy;\n                u_xlat16_16.xy = texture(_BaseMap3, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.y;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_4.xy = (-u_xlat16_3.xw) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_4.xy + u_xlat16_3.xw;\n                u_xlat16_16.xy = texture(_BaseMap4, vs_TEXCOORD0.xy).xw;\n                u_xlat16_22 = u_xlat16_16.y * 0.400000006 + u_xlat16_3.z;\n                u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                u_xlat16_17.xy = (-u_xlat16_3.xy) + u_xlat16_16.xy;\n                u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_17.xy + u_xlat16_3.xy;\n            } else {\n                u_xlat16_3.xy = u_xlat16_2.xy;\n            }\n            u_xlat16_22 = u_xlat16_3.x * u_xlat16_3.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_22) * _BaseColor.xyz;\n            u_xlat16_0.w = u_xlat16_3.y * _BaseColor.w;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(_TextureMode==1.0);\n#else\n            u_xlatb2 = _TextureMode==1.0;\n#endif\n            if(u_xlatb2){\n                u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb5){\n                    u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                    u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                    u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                    u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                } else {\n                    u_xlat16_3 = u_xlat16_2;\n                }\n                u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                u_xlat16_1.xyz = u_xlat16_0.xyz;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb2 = !!(_TextureMode==0.0);\n#else\n                u_xlatb2 = _TextureMode==0.0;\n#endif\n                if(u_xlatb2){\n                    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb6){\n                        u_xlat16_3 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_22 = u_xlat16_3.w * 0.400000006 + u_xlat16_4.x;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_3 = (-u_xlat16_2) + u_xlat16_3;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_3 + u_xlat16_2;\n                        u_xlat16_5 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.y;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_5 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_22 = u_xlat16_5.w * 0.400000006 + u_xlat16_4.z;\n                        u_xlat16_22 = u_xlat16_22 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);\n#else\n                        u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n#endif\n                        u_xlat16_4 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_3 = vec4(u_xlat16_22) * u_xlat16_4 + u_xlat16_3;\n                    } else {\n                        u_xlat16_3 = u_xlat16_2;\n                    }\n                    u_xlat16_0 = u_xlat16_3 * _BaseColor;\n                    u_xlat16_1.xyz = u_xlat16_0.xyz;\n                }\n            }\n        }\n    }\n    u_xlatu2 = uint(_EmissionSelectType);\n    switch(int(u_xlatu2)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_4.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_22 = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_22 = sin(u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb2 = !!(u_xlat16_22>=(-u_xlat16_22));\n#else\n            u_xlatb2 = u_xlat16_22>=(-u_xlat16_22);\n#endif\n            u_xlat16_22 = fract(abs(u_xlat16_22));\n            u_xlat16_22 = (u_xlatb2) ? u_xlat16_22 : (-u_xlat16_22);\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n            u_xlat16_4.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_22 * u_xlat16_4.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_2.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_2.x = u_xlat16_2.x * vs_COLOR0.x;\n            u_xlat2.x = u_xlat16_2.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat2.x>=(-u_xlat2.x));\n#else\n            u_xlatb9 = u_xlat2.x>=(-u_xlat2.x);\n#endif\n            u_xlat16 = fract(abs(u_xlat2.x));\n            u_xlat9 = (u_xlatb9) ? u_xlat16 : (-u_xlat16);\n            u_xlat2.y = u_xlat9 * _EmissionMap_ST.x;\n            u_xlat6.xy = floor(u_xlat2.yx);\n            u_xlat16_4.xy = u_xlat6.xy + vs_TEXCOORD0.xy;\n            u_xlat16_4.xy = u_xlat16_4.xy / _EmissionMap_ST.xy;\n            u_xlat16_2.xyz = texture(_EmissionMap, u_xlat16_4.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_3 : u_xlat16_0;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_22 = u_xlat16_0.w + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_22<0.0);\n#else\n        u_xlatb9 = u_xlat16_22<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    SV_TARGET0.w = u_xlat16_0.w;\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 38\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.88   17.00    1.50       LS\nShortest path cycles:        0.54   16.00    1.50       LS\nLongest path cycles:         0.71   16.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 24\nUniform registers: 52\nStack spilling: false\n16-bit arithmetic: 55%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    5.25    0.00    1.00    9.50        T\nShortest path cycles:        0.75    0.00    0.50    0.00        A\nLongest path cycles:         2.88    0.00    1.00    2.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbool u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nmediump vec3 u_xlat16_25;\nbool u_xlatb25;\nfloat u_xlat41;\nmediump float u_xlat16_50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_56;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_50 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_50 = min(u_xlat16_50, 1.0);\n        u_xlat16_50 = (-u_xlat16_50) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_50);\n        u_xlat16_50 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_52 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_52 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_50 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(_TextureMode==1.0);\n#else\n            u_xlatb9 = _TextureMode==1.0;\n#endif\n            if(u_xlatb9){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_50 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9 = !!(_TextureMode==0.0);\n#else\n                u_xlatb9 = _TextureMode==0.0;\n#endif\n                if(u_xlatb9){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9){\n                        u_xlat16_25.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_25.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_50 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9 = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_24 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_24 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb25 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb25 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat41 = fract(abs(u_xlat9.x));\n            u_xlat25 = (u_xlatb25) ? u_xlat41 : (-u_xlat41);\n            u_xlat9.y = u_xlat25 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (bool(u_xlatb9)) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9 = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9 = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9 = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_56 = u_xlat16_56 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_56 = min(max(u_xlat16_56, 0.0), 1.0);\n#else\n            u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n#endif\n            u_xlat16_59 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_59 = max(u_xlat16_59, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_60 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_60 = min(max(u_xlat16_60, 0.0), 1.0);\n#else\n            u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n#endif\n            u_xlat16_60 = (-u_xlat16_60) + 1.0;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n            u_xlat16_60 = u_xlat16_60 * u_xlat16_60;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_61 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_61 = u_xlat16_61 + u_xlat16_61;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_61)) + (-u_xlat16_14.xyz);\n                u_xlat16_61 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_61 = u_xlat16_1.w * u_xlat16_61;\n                u_xlat16_61 = u_xlat16_61 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_61).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59 + 1.0;\n            u_xlat16_59 = float(1.0) / float(u_xlat16_59);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_59);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_56);\n            u_xlat16_13.xyz = vec3(u_xlat16_60) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_50) * 0.959999979 + 0.959999979;\n            u_xlat16_59 = (-u_xlat16_56) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_56);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_50 = (-u_xlat16_1.w) + u_xlat16_59;\n            u_xlat16_50 = u_xlat16_50 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);\n#else\n            u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n#endif\n            u_xlat16_56 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_56 = max(u_xlat16_56, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_59 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_59 = min(max(u_xlat16_59, 0.0), 1.0);\n#else\n            u_xlat16_59 = clamp(u_xlat16_59, 0.0, 1.0);\n#endif\n            u_xlat16_59 = (-u_xlat16_59) + 1.0;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n            u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb9){\n                u_xlat16_60 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_60 = u_xlat16_60 + u_xlat16_60;\n                u_xlat16_14.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_60)) + (-u_xlat16_14.xyz);\n                u_xlat16_60 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_60 = u_xlat16_1.w * u_xlat16_60;\n                u_xlat16_60 = u_xlat16_60 * 6.0;\n                u_xlat16_25.xyz = textureLod(unity_SpecCube0, u_xlat16_14.xyz, u_xlat16_60).xyz;\n                u_xlat16_14.xyz = u_xlat16_25.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_14.xyz = (bool(u_xlatb9)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_56 = u_xlat16_56 * u_xlat16_56 + 1.0;\n            u_xlat16_56 = float(1.0) / float(u_xlat16_56);\n            u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56);\n            u_xlat16_15.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_50);\n            u_xlat16_13.xyz = vec3(u_xlat16_59) * u_xlat16_15.xyz + u_xlat16_13.xyz;\n            u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n            u_xlat16_11.xyz = u_xlat16_0.yzw + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.38    0.00    1.88   12.00        A\nShortest path cycles:        1.08    0.00    0.50    0.00        A\nLongest path cycles:         6.17    0.00    1.88    4.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat8;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat1.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat1.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat21 = max(u_xlat21, 1.17549435e-38);\n        u_xlat21 = inversesqrt(u_xlat21);\n        u_xlat8.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat8.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat1.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat1.x;\n    }\n    u_xlatu21 = uint(_UvType);\n    switch(int(u_xlatu21)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat0.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat1.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 7%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   21.00    0.00       LS\nShortest path cycles:        2.55   19.00    0.00       LS\nLongest path cycles:         3.47   20.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(9) uniform mediump sampler2D _Properties;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec2 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nuint u_xlatu7;\nfloat u_xlat14;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat7.x = float(uint(gl_InstanceID));\n    u_xlat14 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat14;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat3.xyz = in_POSITION0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat3);\n    u_xlat1.y = dot(u_xlat2, u_xlat3);\n    u_xlat1.z = dot(u_xlat0, u_xlat3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb21){\n        u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_4.x = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_4.y = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_4.z = dot(u_xlat3.xyz, in_TANGENT0.xyz);\n        u_xlat22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat22 = max(u_xlat22, 1.17549435e-38);\n        u_xlat22 = inversesqrt(u_xlat22);\n        u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_4.xyz;\n        u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;\n        u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat5.xyz);\n        u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n        u_xlat3.w = u_xlat0.y;\n        vs_TEXCOORD4 = u_xlat3;\n        u_xlat4.w = u_xlat0.z;\n        vs_TEXCOORD5 = u_xlat4;\n        u_xlat16_2.xyz = u_xlat2.xyz;\n    } else {\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat7.x = max(u_xlat7.x, 1.17549435e-38);\n        u_xlat7.x = inversesqrt(u_xlat7.x);\n        u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;\n        u_xlat16_6.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat16_2.xyz = u_xlat7.xyz * u_xlat16_6.xxx;\n        vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD4.w = u_xlat0.x;\n        vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);\n        vs_TEXCOORD5.w = u_xlat0.x;\n    }\n    u_xlatu7 = uint(_UvType);\n    switch(int(u_xlatu7)){\n        case 0:\n            u_xlat6.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 1:\n            u_xlat6.xy = u_xlat1.xz * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        case 2:\n            u_xlat6.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n            u_xlat16_6.xy = u_xlat6.xy;\n            break;\n        default:\n            u_xlat16_6.x = float(0.0);\n            u_xlat16_6.y = float(0.0);\n            break;\n    }\n    vs_TEXCOORD0.xy = u_xlat16_6.xy;\n    u_xlat16_3 = u_xlat16_2.yzzx * u_xlat16_2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_27 = u_xlat16_2.y * u_xlat16_2.y;\n    u_xlat16_27 = u_xlat16_2.x * u_xlat16_2.x + (-u_xlat16_27);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = u_xlat0.x;\n    vs_TEXCOORD6 = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}",
        "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _DetailMap;\nUNITY_LOCATION(5) uniform mediump sampler2D _NormalMetallicRoughness;\nUNITY_LOCATION(6) uniform mediump sampler2D _BaseMap2;\nUNITY_LOCATION(7) uniform mediump sampler2D _BaseMap3;\nUNITY_LOCATION(8) uniform mediump sampler2D _BaseMap4;\nin mediump vec2 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nuint u_xlatu9;\nbvec2 u_xlatb9;\nvec2 u_xlat10;\nmediump vec3 u_xlat16_10;\nuint u_xlatu10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nbool u_xlatb29;\nint u_xlati30;\nbool u_xlatb30;\nfloat u_xlat49;\nuint u_xlatu49;\nbvec2 u_xlatb49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_62;\nmediump float u_xlat16_64;\nmediump float u_xlat16_68;\nfloat u_xlat69;\nint u_xlati69;\nbool u_xlatb69;\nfloat u_xlat70;\nmediump float u_xlat16_70;\nuint u_xlatu70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nmediump float u_xlat16_75;\nfloat u_xlat77;\nfloat u_xlat78;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    { bool cond = _TextureMode==2.0; u_xlat16_0.x = uintBitsToFloat(!!cond ? 0xFFFFFFFFu : uint(0)); }\n#else\n    u_xlat16_0.x = uintBitsToFloat((_TextureMode==2.0) ? 0xFFFFFFFFu : uint(0));\n#endif\n    if(floatBitsToUint(u_xlat16_0.x) != uint(0)) {\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n        u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n        if(u_xlatb1){\n            u_xlat16_1 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n            u_xlat16_2.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n            u_xlat16_2.x = u_xlat16_1.w * 0.400000006 + u_xlat16_2.x;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_1 = (-u_xlat16_0) + u_xlat16_1;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;\n            u_xlat16_3 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.y;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3 + u_xlat16_1;\n            u_xlat16_3 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n            u_xlat16_2.x = u_xlat16_3.w * 0.400000006 + u_xlat16_2.z;\n            u_xlat16_2.x = u_xlat16_2.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);\n#else\n            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n#endif\n            u_xlat16_3 = (-u_xlat16_1) + u_xlat16_3;\n            u_xlat16_1 = u_xlat16_2.xxxx * u_xlat16_3.yzxw + u_xlat16_1.yzxw;\n        } else {\n            u_xlat16_1 = u_xlat16_0.yzxw;\n        }\n        u_xlat16_2.x = u_xlat16_1.z * u_xlat16_1.z;\n        u_xlat16_2.xyz = u_xlat16_2.xxx * _BaseColor.xyz;\n        u_xlat16_4.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_62 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n        u_xlat16_62 = min(u_xlat16_62, 1.0);\n        u_xlat16_62 = (-u_xlat16_62) + 1.0;\n        u_xlat16_4.z = sqrt(u_xlat16_62);\n        u_xlat16_62 = _Metallic;\n        u_xlat16_0.w = _BaseColor.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb5 = !!(_TextureMode==3.0);\n#else\n        u_xlatb5 = _TextureMode==3.0;\n#endif\n        if(u_xlatb5){\n            u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n            if(u_xlatb5){\n                u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                u_xlat16_6.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                u_xlat16_64 = u_xlat16_5.w * 0.400000006 + u_xlat16_6.x;\n                u_xlat16_6.x = u_xlat16_64 + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_5 + u_xlat16_3;\n                u_xlat16_7 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                u_xlat16_6.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.y;\n                u_xlat16_6.x = u_xlat16_6.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);\n#else\n                u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);\n#endif\n                u_xlat16_7 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_6.xxxx * u_xlat16_7 + u_xlat16_5;\n                u_xlat16_7 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                u_xlat16_8.x = u_xlat16_7.w * 0.400000006 + u_xlat16_6.z;\n                u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                u_xlat16_6 = (-u_xlat16_5) + u_xlat16_7;\n                u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6.yzxw + u_xlat16_5.yzxw;\n            } else {\n                u_xlat16_5 = u_xlat16_3.yzxw;\n            }\n            u_xlat16_8.x = u_xlat16_5.z * u_xlat16_5.z;\n            u_xlat16_2.xyz = u_xlat16_8.xxx * _BaseColor.xyz;\n            u_xlat16_4.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n            u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n            u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n            u_xlat16_4.z = sqrt(u_xlat16_8.x);\n            u_xlat16_0.w = u_xlat16_5.w * _BaseColor.w;\n            u_xlat16_62 = _Metallic;\n            u_xlat16_1.w = _Roughness;\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(_TextureMode==1.0);\n#else\n            u_xlatb9.x = _TextureMode==1.0;\n#endif\n            if(u_xlatb9.x){\n                u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                    u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                    u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                    u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                    u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                    u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                    u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                    u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                } else {\n                    u_xlat16_5 = u_xlat16_3;\n                }\n                u_xlat16_0 = u_xlat16_5 * _BaseColor;\n                u_xlat16_3 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_4.xy = u_xlat16_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_8.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n                u_xlat16_8.x = min(u_xlat16_8.x, 1.0);\n                u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;\n                u_xlat16_4.z = sqrt(u_xlat16_8.x);\n                u_xlat16_2.xyz = u_xlat16_0.xyz;\n                u_xlat16_62 = u_xlat16_3.z;\n                u_xlat16_1.w = u_xlat16_3.w;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb9.x = !!(_TextureMode==0.0);\n#else\n                u_xlatb9.x = _TextureMode==0.0;\n#endif\n                if(u_xlatb9.x){\n                    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy);\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorForBlendTexture);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_5 = texture(_BaseMap2, vs_TEXCOORD0.xy);\n                        u_xlat16_8.xyz = vs_COLOR0.xyz * vec3(1.60000002, 1.60000002, 1.60000002);\n                        u_xlat16_8.x = u_xlat16_5.w * 0.400000006 + u_xlat16_8.x;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_5 = (-u_xlat16_3) + u_xlat16_5;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_5 + u_xlat16_3;\n                        u_xlat16_6 = texture(_BaseMap3, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.y;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                        u_xlat16_6 = texture(_BaseMap4, vs_TEXCOORD0.xy);\n                        u_xlat16_8.x = u_xlat16_6.w * 0.400000006 + u_xlat16_8.z;\n                        u_xlat16_8.x = u_xlat16_8.x + -0.600000024;\n#ifdef UNITY_ADRENO_ES3\n                        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);\n#else\n                        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n#endif\n                        u_xlat16_6 = (-u_xlat16_5) + u_xlat16_6;\n                        u_xlat16_5 = u_xlat16_8.xxxx * u_xlat16_6 + u_xlat16_5;\n                    } else {\n                        u_xlat16_5 = u_xlat16_3;\n                    }\n                    u_xlat16_0 = u_xlat16_5 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb9.x){\n                        u_xlat16_29.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_8.xyz = u_xlat16_29.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_4.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_2.xyz = u_xlat16_0.xyz;\n                    u_xlat16_62 = 0.0;\n                    u_xlat16_1.w = 1.0;\n                }\n            }\n        }\n    }\n    u_xlatu9 = uint(_EmissionSelectType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_0.x = float(0.0);\n            u_xlat16_0.y = float(0.0);\n            u_xlat16_0.z = float(0.0);\n            break;\n        case 1:\n            u_xlat16_8.xy = vs_TEXCOORD0.xy * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 2:\n            u_xlat16_8.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, vec3(12.9910002, 78.2310028, 41.3720016));\n            u_xlat16_8.x = sin(u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * 43758.5469;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb9.x = !!(u_xlat16_8.x>=(-u_xlat16_8.x));\n#else\n            u_xlatb9.x = u_xlat16_8.x>=(-u_xlat16_8.x);\n#endif\n            u_xlat16_8.x = fract(abs(u_xlat16_8.x));\n            u_xlat16_8.x = (u_xlatb9.x) ? u_xlat16_8.x : (-u_xlat16_8.x);\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n            u_xlat16_28 = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_28 * u_xlat16_8.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        case 3:\n            u_xlat16_0.xyz = vs_COLOR0.xxx * _EmissionColor.xyz;\n            break;\n        case 4:\n            u_xlat16_9.x = _EmissionMap_ST.y * _EmissionMap_ST.x;\n            u_xlat16_9.x = u_xlat16_9.x * vs_COLOR0.x;\n            u_xlat9.x = u_xlat16_9.x / _EmissionMap_ST.x;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb29 = !!(u_xlat9.x>=(-u_xlat9.x));\n#else\n            u_xlatb29 = u_xlat9.x>=(-u_xlat9.x);\n#endif\n            u_xlat49 = fract(abs(u_xlat9.x));\n            u_xlat29 = (u_xlatb29) ? u_xlat49 : (-u_xlat49);\n            u_xlat9.y = u_xlat29 * _EmissionMap_ST.x;\n            u_xlat10.xy = floor(u_xlat9.yx);\n            u_xlat16_8.xy = u_xlat10.xy + vs_TEXCOORD0.xy;\n            u_xlat16_8.xy = u_xlat16_8.xy / _EmissionMap_ST.xy;\n            u_xlat16_9.xyz = texture(_EmissionMap, u_xlat16_8.xy).xyz;\n            u_xlat16_0.xyz = u_xlat16_9.xyz * _EmissionColor.xyz;\n            u_xlat16_0.xyz = u_xlat16_0.xyz;\n            break;\n        default:\n            break;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorToAlbedo);\n#endif\n    u_xlat16_8.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;\n    u_xlat16_3 = u_xlat16_0 * vs_COLOR0;\n    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_2.xyz;\n    u_xlat16_0 = (u_xlatb9.x) ? u_xlat16_3.wxyz : u_xlat16_0.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(0.0<_DetailMapUvType);\n#else\n    u_xlatb9.x = 0.0<_DetailMapUvType;\n#endif\n    if(u_xlatb9.x){\n        u_xlatu9 = uint(_DetailMapUvType);\n        switch(int(u_xlatu9)){\n            case 1:\n                u_xlat16_8.xy = vs_TEXCOORD0.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                break;\n            case 2:\n                u_xlat8.xy = vs_TEXCOORD2.xz * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            case 3:\n                u_xlat8.xy = vs_TEXCOORD2.xy * vec2(vec2(_DetailMapScale, _DetailMapScale));\n                u_xlat16_8.xy = u_xlat8.xy;\n                break;\n            default:\n                break;\n        }\n        u_xlat16_3 = texture(_DetailMap, u_xlat16_8.xy);\n        u_xlat16_3 = u_xlat16_3 + vec4(-0.5, -0.5, -0.5, -0.5);\n        u_xlat16_2.xyz = u_xlat16_3.xxx * vec3(vec3(_DetailLuminanceIntensity, _DetailLuminanceIntensity, _DetailLuminanceIntensity)) + u_xlat16_2.xyz;\n        u_xlat16_4.xy = u_xlat16_3.yz * vec2(vec2(_DetailNormalIntensity, _DetailNormalIntensity)) + u_xlat16_4.xy;\n        u_xlat16_1.w = u_xlat16_3.w * _DetailRougnhessIntensity + u_xlat16_1.w;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AlphaClip);\n#endif\n    if(u_xlatb9.x){\n        u_xlat16_8.x = u_xlat16_0.x + (-_Cutoff);\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb9.x = !!(u_xlat16_8.x<0.0);\n#else\n        u_xlatb9.x = u_xlat16_8.x<0.0;\n#endif\n        if(u_xlatb9.x){discard;}\n        SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_8.xyz = u_xlat16_4.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.xxx * vs_TEXCOORD4.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_4.zzz * vs_TEXCOORD3.xyz + u_xlat16_8.xyz;\n    u_xlat16_3.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat16_3);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat16_3);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat16_3);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatu9 = uint(_LightingType);\n    switch(int(u_xlatu9)){\n        case 0:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_71 = (-u_xlat16_1.w) + u_xlat16_71;\n            u_xlat16_71 = u_xlat16_71 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n            u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n            u_xlat16_72 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_72 = max(u_xlat16_72, 6.10351563e-05);\n            u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_9.x = u_xlat16_72 * 4.0 + 2.0;\n            u_xlat16_29.x = u_xlat16_72 * u_xlat16_72 + -1.0;\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n            u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n            u_xlat16_74 = (-u_xlat16_74) + 1.0;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n            u_xlatb49.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb49.x){\n                u_xlat16_15.x = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-u_xlat16_15.xxx) + (-u_xlat16_14.xyz);\n                u_xlat16_75 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_75 = u_xlat16_1.w * u_xlat16_75;\n                u_xlat16_75 = u_xlat16_75 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_75).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb49.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72 + 1.0;\n            u_xlat16_72 = float(1.0) / float(u_xlat16_72);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_72);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_71);\n            u_xlat16_16.xyz = vec3(u_xlat16_74) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu49 = uint(int(u_xlat16_71));\n            u_xlat16_11.xyz = u_xlat16_12.xyz;\n            for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu49 ; u_xlatu_loop_1++)\n            {\n                u_xlati30 = int(uint(u_xlatu_loop_1 & 3u));\n                u_xlatu50 = uint(u_xlatu_loop_1 >> 2u);\n                u_xlat16_71 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati30]);\n                u_xlati30 = int(u_xlat16_71);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati30].www + _AdditionalLightsPosition[u_xlati30].xyz;\n                u_xlat50 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat70 = inversesqrt(u_xlat50);\n                u_xlat18.xyz = vec3(u_xlat70) * u_xlat17.xyz;\n                u_xlat77 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati30].x + _AdditionalLightsAttenuation[u_xlati30].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat77;\n                u_xlat16_71 = dot(_AdditionalLightsSpotDir[u_xlati30].xyz, u_xlat18.xyz);\n                u_xlat16_71 = u_xlat16_71 * _AdditionalLightsAttenuation[u_xlati30].z + _AdditionalLightsAttenuation[u_xlati30].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_71 = u_xlat16_71 * u_xlat16_71;\n                u_xlat50 = u_xlat50 * u_xlat16_71;\n                u_xlat16_71 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_71 = min(max(u_xlat16_71, 0.0), 1.0);\n#else\n                u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat17.xyz * vec3(u_xlat70) + u_xlat16_14.xyz;\n                u_xlat16_70 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n                u_xlat16_70 = max(u_xlat16_70, 1.17549435e-38);\n                u_xlat16_70 = inversesqrt(u_xlat16_70);\n                u_xlat16_17.xyz = vec3(u_xlat16_70) * u_xlat16_15.xyz;\n                u_xlat16_72 = dot(u_xlat18.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n                u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n                u_xlat16_74 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_74 = min(max(u_xlat16_74, 0.0), 1.0);\n#else\n                u_xlat16_74 = clamp(u_xlat16_74, 0.0, 1.0);\n#endif\n                u_xlat16_74 = u_xlat16_74 * u_xlat16_74;\n                u_xlat16_70 = u_xlat16_74 * u_xlat16_29.x + 1.00001001;\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_70;\n                u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n                u_xlat16_17.x = max(u_xlat16_72, 0.100000001);\n                u_xlat16_70 = u_xlat16_70 * u_xlat16_17.x;\n                u_xlat16_70 = u_xlat16_9.x * u_xlat16_70;\n                u_xlat16_70 = u_xlat16_73 / u_xlat16_70;\n                u_xlat16_72 = u_xlat16_70 + -6.10351563e-05;\n                u_xlat16_72 = max(u_xlat16_72, 0.0);\n                u_xlat16_72 = min(u_xlat16_72, 100.0);\n                u_xlat16_15.xyz = u_xlat16_13.xyz * vec3(u_xlat16_72);\n                u_xlat16_15.xyz = (u_xlatb49.y) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_71 = u_xlat50 * u_xlat16_71;\n                u_xlat16_16.xyz = vec3(u_xlat16_71) * _AdditionalLightsColor[u_xlati30].xyz;\n                u_xlat16_15.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat16_11.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz + u_xlat16_11.xyz;\n            }\n            break;\n        case 1:\n            u_xlat16_68 = (-u_xlat16_62) * 0.959999979 + 0.959999979;\n            u_xlat16_71 = (-u_xlat16_68) + 1.0;\n            u_xlat16_12.xyz = u_xlat16_2.xyz * vec3(u_xlat16_68);\n            u_xlat16_13.xyz = u_xlat16_2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_13.xyz = vec3(u_xlat16_62) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_62 = (-u_xlat16_1.w) + 1.0;\n            u_xlat16_68 = u_xlat16_71 + u_xlat16_62;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n            u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n            u_xlat16_71 = u_xlat16_1.w * u_xlat16_1.w;\n            u_xlat16_71 = max(u_xlat16_71, 6.10351563e-05);\n            u_xlat16_14.x = vs_TEXCOORD3.w;\n            u_xlat16_14.y = vs_TEXCOORD4.w;\n            u_xlat16_14.z = vs_TEXCOORD5.w;\n            u_xlat16_72 = dot(u_xlat16_3.xyz, u_xlat16_14.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_72 = min(max(u_xlat16_72, 0.0), 1.0);\n#else\n            u_xlat16_72 = clamp(u_xlat16_72, 0.0, 1.0);\n#endif\n            u_xlat16_72 = (-u_xlat16_72) + 1.0;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlat16_72 = u_xlat16_72 * u_xlat16_72;\n            u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb9.x){\n                u_xlat16_73 = dot((-u_xlat16_14.xyz), u_xlat16_3.xyz);\n                u_xlat16_73 = u_xlat16_73 + u_xlat16_73;\n                u_xlat16_15.xyz = u_xlat16_3.xyz * (-vec3(u_xlat16_73)) + (-u_xlat16_14.xyz);\n                u_xlat16_73 = (-u_xlat16_1.w) * 0.699999988 + 1.70000005;\n                u_xlat16_73 = u_xlat16_1.w * u_xlat16_73;\n                u_xlat16_73 = u_xlat16_73 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_15.xyz, u_xlat16_73).xyz;\n                u_xlat16_15.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_15.xyz = (u_xlatb9.x) ? u_xlat16_15.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_71 = u_xlat16_71 * u_xlat16_71 + 1.0;\n            u_xlat16_71 = float(1.0) / float(u_xlat16_71);\n            u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_71);\n            u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_68);\n            u_xlat16_16.xyz = vec3(u_xlat16_72) * u_xlat16_16.xyz + u_xlat16_13.xyz;\n            u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_16.xyz;\n            u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_12.xyz + u_xlat16_15.xyz;\n            u_xlat16_68 = u_xlat16_62 * u_xlat16_62;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n            u_xlat16_68 = u_xlat16_68 * 1000.09998;\n            u_xlat16_71 = (-u_xlat16_62) + 1.0;\n            u_xlat16_72 = (-u_xlat16_62) + u_xlat16_71;\n            u_xlat16_62 = dot(vec2(u_xlat16_71), vec2(u_xlat16_62));\n            u_xlat16_62 = u_xlat16_72 * 2.0 + u_xlat16_62;\n            u_xlat16_71 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlatu9 = uint(int(u_xlat16_71));\n            u_xlat16_10.xyz = vec3(u_xlat16_68) * u_xlat16_13.xyz;\n            u_xlat16_13.x = float(0.0);\n            u_xlat16_13.y = float(0.0);\n            u_xlat16_13.z = float(0.0);\n            u_xlat16_15.x = float(0.0);\n            u_xlat16_15.y = float(0.0);\n            u_xlat16_15.z = float(0.0);\n            for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<u_xlatu9 ; u_xlatu_loop_2++)\n            {\n                u_xlati69 = int(uint(u_xlatu_loop_2 & 3u));\n                u_xlatu70 = uint(u_xlatu_loop_2 >> 2u);\n                u_xlat16_68 = dot(unity_LightIndices[int(u_xlatu70)], ImmCB_0_0_0[u_xlati69]);\n                u_xlati69 = int(u_xlat16_68);\n                u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati69].www + _AdditionalLightsPosition[u_xlati69].xyz;\n                u_xlat70 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat70 = max(u_xlat70, 6.10351563e-05);\n                u_xlat77 = inversesqrt(u_xlat70);\n                u_xlat18.xyz = vec3(u_xlat77) * u_xlat17.xyz;\n                u_xlat78 = float(1.0) / float(u_xlat70);\n                u_xlat70 = u_xlat70 * _AdditionalLightsAttenuation[u_xlati69].x + _AdditionalLightsAttenuation[u_xlati69].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat70 = min(max(u_xlat70, 0.0), 1.0);\n#else\n                u_xlat70 = clamp(u_xlat70, 0.0, 1.0);\n#endif\n                u_xlat70 = u_xlat70 * u_xlat78;\n                u_xlat16_68 = dot(_AdditionalLightsSpotDir[u_xlati69].xyz, u_xlat18.xyz);\n                u_xlat16_68 = u_xlat16_68 * _AdditionalLightsAttenuation[u_xlati69].z + _AdditionalLightsAttenuation[u_xlati69].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_68 = u_xlat16_68 * u_xlat16_68;\n                u_xlat70 = u_xlat16_68 * u_xlat70;\n                u_xlat16_16.xyz = vec3(u_xlat70) * _AdditionalLightsColor[u_xlati69].xyz;\n                u_xlat16_68 = dot(u_xlat16_3.xyz, u_xlat18.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_68 = min(max(u_xlat16_68, 0.0), 1.0);\n#else\n                u_xlat16_68 = clamp(u_xlat16_68, 0.0, 1.0);\n#endif\n                u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat16_68) + u_xlat16_15.xyz;\n                u_xlat17.xyz = u_xlat17.xyz * vec3(u_xlat77) + u_xlat16_14.xyz;\n                u_xlat69 = dot(u_xlat17.xyz, u_xlat17.xyz);\n                u_xlat69 = max(u_xlat69, 1.17549435e-38);\n                u_xlat69 = inversesqrt(u_xlat69);\n                u_xlat17.xyz = vec3(u_xlat69) * u_xlat17.xyz;\n                u_xlat69 = dot(u_xlat16_3.xyz, u_xlat17.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat69 = min(max(u_xlat69, 0.0), 1.0);\n#else\n                u_xlat69 = clamp(u_xlat69, 0.0, 1.0);\n#endif\n                u_xlat16_68 = log2(u_xlat69);\n                u_xlat16_68 = u_xlat16_62 * u_xlat16_68;\n                u_xlat16_68 = exp2(u_xlat16_68);\n                u_xlat16_19.xyz = vec3(u_xlat16_68) * u_xlat16_10.xyz;\n                u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_19.xyz + u_xlat16_13.xyz;\n                u_xlat16_13.xyz = (u_xlatb9.y) ? u_xlat16_16.xyz : u_xlat16_13.xyz;\n            }\n            u_xlat16_14.xyz = u_xlat16_15.xyz * u_xlat16_2.xyz + u_xlat16_0.yzw;\n            u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_14.xyz;\n            u_xlat16_11.xyz = u_xlat16_13.xyz + u_xlat16_12.xyz;\n            break;\n        case 2:\n            u_xlat16_11.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz + u_xlat16_0.yzw;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_2.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}",
        "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED DIRLIGHTMAP_COMBINED MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 6%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.67   21.00    1.50       LS\nShortest path cycles:        2.72   19.00    1.50       LS\nLongest path cycles:         3.50   20.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 60%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   18.17   12.00    1.88   12.00        A\nShortest path cycles:        1.04    0.00    0.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: true\nUses late ZS test: false\nUses late ZS update: true\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n#ifdef UNITY_ADRENO_ES3\n    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);\n#else\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n#endif\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}",
        "name": "Global Keywords: <none>\nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 28\nUniform registers: 78\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    1.83    2.00    0.00       LS\nShortest path cycles:        1.83    2.00    0.00       LS\nLongest path cycles:         1.83    2.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 9\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.04    3.00    0.00       LS\nShortest path cycles:        0.04    3.00    0.00       LS\nLongest path cycles:         0.04    3.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 18\nUniform registers: 0\nStack spilling: false\n16-bit arithmetic: N/A\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.12    0.00    0.00    0.00        A\nShortest path cycles:        0.12    0.00    0.00    0.00        A\nLongest path cycles:         0.12    0.00    0.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: false\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    },
    {
        "py/object": "__main__.Shader",
        "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UseVertexColorForBlendTexture;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}",
        "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}",
        "name": "Global Keywords: <none>\nLocal Keywords: <none>\n",
        "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    1.21    1.00    0.00        A\nShortest path cycles:        1.21    1.00    0.00        A\nLongest path cycles:         1.21    1.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 9\nUniform registers: 50\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.04    3.00    0.00       LS\nShortest path cycles:        0.04    3.00    0.00       LS\nLongest path cycles:         0.04    3.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n",
        "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 18\nUniform registers: 0\nStack spilling: false\n16-bit arithmetic: N/A\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.12    0.00    0.00    0.00        A\nShortest path cycles:        0.12    0.00    0.00    0.00        A\nLongest path cycles:         0.12    0.00    0.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: false\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"
    }
]