[{"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_LOW \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 106\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.30   10.00    0.00       LS\nShortest path cycles:        2.30   10.00    0.00       LS\nLongest path cycles:         2.30   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 61%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.75    0.00    0.75    0.50     A, V\nShortest path cycles:        0.75    0.00    0.75    0.50     A, V\nLongest path cycles:         0.75    0.00    0.75    0.50     A, V\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_LOW \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 106\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.30   10.00    0.00       LS\nShortest path cycles:        2.30   10.00    0.00       LS\nLongest path cycles:         2.30   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 42%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.92    0.00    0.75    1.00        T\nShortest path cycles:        0.92    0.00    0.75    1.00        T\nLongest path cycles:         0.92    0.00    0.75    1.00        T\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat0.w = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.zw = u_xlat0.wx;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + (-unity_FogColor.xyz);\n    u_xlat16_14 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_LOW \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 112\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 102\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.42   10.00    0.00       LS\nShortest path cycles:        2.42   10.00    0.00       LS\nLongest path cycles:         2.42   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 16\nStack spilling: false\n16-bit arithmetic: 58%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.96    0.00    0.88    0.50        A\nShortest path cycles:        0.96    0.00    0.88    0.50        A\nLongest path cycles:         0.96    0.00    0.88    0.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat0.w = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.zw = u_xlat0.wx;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_17 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_17 = min(u_xlat16_17, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_LOW \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 112\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 102\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.42   10.00    0.00       LS\nShortest path cycles:        2.42   10.00    0.00       LS\nLongest path cycles:         2.42   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 29\nUniform registers: 20\nStack spilling: false\n16-bit arithmetic: 37%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    1.12    0.00    0.88    1.00        A\nShortest path cycles:        1.12    0.00    0.88    1.00        A\nLongest path cycles:         1.12    0.00    0.88    1.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(1) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 27\nUniform registers: 88\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.55   10.00    1.50       LS\nShortest path cycles:        2.55   10.00    1.50       LS\nLongest path cycles:         2.55   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 61%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.75    0.00    0.75    0.50     A, V\nShortest path cycles:        0.75    0.00    0.75    0.50     A, V\nLongest path cycles:         0.75    0.00    0.75    0.50     A, V\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(2) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 27\nUniform registers: 88\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.55   10.00    1.50       LS\nShortest path cycles:        2.55   10.00    1.50       LS\nLongest path cycles:         2.55   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 42%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.92    0.00    0.75    1.00        T\nShortest path cycles:        0.92    0.00    0.75    1.00        T\nLongest path cycles:         0.92    0.00    0.75    1.00        T\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(1) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    vs_TEXCOORD0.z = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + (-unity_FogColor.xyz);\n    u_xlat16_14 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_LOW \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 98\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.50   10.00    1.50       LS\nShortest path cycles:        2.50   10.00    1.50       LS\nLongest path cycles:         2.50   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 16\nStack spilling: false\n16-bit arithmetic: 58%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.96    0.00    0.88    0.50        A\nShortest path cycles:        0.96    0.00    0.88    0.50        A\nLongest path cycles:         0.96    0.00    0.88    0.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(2) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    vs_TEXCOORD0.z = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_17 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_17 = min(u_xlat16_17, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_LOW \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 98\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.50   10.00    1.50       LS\nShortest path cycles:        2.50   10.00    1.50       LS\nLongest path cycles:         2.50   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 29\nUniform registers: 20\nStack spilling: false\n16-bit arithmetic: 37%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    1.12    0.00    0.88    1.00        A\nShortest path cycles:        1.12    0.00    0.88    1.00        A\nLongest path cycles:         1.12    0.00    0.88    1.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 106\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.30   10.00    0.00       LS\nShortest path cycles:        2.30   10.00    0.00       LS\nLongest path cycles:         2.30   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 61%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.75    0.00    0.75    0.50     A, V\nShortest path cycles:        0.75    0.00    0.75    0.50     A, V\nLongest path cycles:         0.75    0.00    0.75    0.50     A, V\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 106\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.30   10.00    0.00       LS\nShortest path cycles:        2.30   10.00    0.00       LS\nLongest path cycles:         2.30   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 42%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.92    0.00    0.75    1.00        T\nShortest path cycles:        0.92    0.00    0.75    1.00        T\nLongest path cycles:         0.92    0.00    0.75    1.00        T\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat0.w = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.zw = u_xlat0.wx;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + (-unity_FogColor.xyz);\n    u_xlat16_14 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 112\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 102\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.42   10.00    0.00       LS\nShortest path cycles:        2.42   10.00    0.00       LS\nLongest path cycles:         2.42   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 16\nStack spilling: false\n16-bit arithmetic: 58%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.96    0.00    0.88    0.50        A\nShortest path cycles:        0.96    0.00    0.88    0.50        A\nLongest path cycles:         0.96    0.00    0.88    0.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat1;\n    u_xlat0.w = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat0.xy = vec2(vec2(_UvType, _UvType)) * u_xlat0.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    vs_TEXCOORD0.zw = u_xlat0.wx;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_14 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_14 = inversesqrt(u_xlat16_14);\n    u_xlat16_0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_17 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_17 = min(u_xlat16_17, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 112\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 28\nUniform registers: 102\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.42   10.00    0.00       LS\nShortest path cycles:        2.42   10.00    0.00       LS\nLongest path cycles:         2.42   10.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 29\nUniform registers: 20\nStack spilling: false\n16-bit arithmetic: 37%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    1.12    0.00    0.88    1.00        A\nShortest path cycles:        1.12    0.00    0.88    1.00        A\nLongest path cycles:         1.12    0.00    0.88    1.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(1) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 27\nUniform registers: 88\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.55   10.00    1.50       LS\nShortest path cycles:        2.55   10.00    1.50       LS\nLongest path cycles:         2.55   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 61%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.75    0.00    0.75    0.50     A, V\nShortest path cycles:        0.75    0.00    0.75    0.50     A, V\nLongest path cycles:         0.75    0.00    0.75    0.50     A, V\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(2) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_TEXCOORD0.z = 0.0;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 96\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 27\nUniform registers: 88\nStack spilling: false\n16-bit arithmetic: 16%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.55   10.00    1.50       LS\nShortest path cycles:        2.55   10.00    1.50       LS\nLongest path cycles:         2.55   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 12\nStack spilling: false\n16-bit arithmetic: 42%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.92    0.00    0.75    1.00        T\nShortest path cycles:        0.92    0.00    0.75    1.00        T\nLongest path cycles:         0.92    0.00    0.75    1.00        T\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(1) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    vs_TEXCOORD0.z = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + (-unity_FogColor.xyz);\n    u_xlat16_14 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 98\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.50   10.00    1.50       LS\nShortest path cycles:        2.50   10.00    1.50       LS\nLongest path cycles:         2.50   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 22\nUniform registers: 16\nStack spilling: false\n16-bit arithmetic: 58%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.96    0.00    0.88    0.50        A\nShortest path cycles:        0.96    0.00    0.88    0.50        A\nLongest path cycles:         0.96    0.00    0.88    0.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(2) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat12;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = float(uint(gl_InstanceID));\n    u_xlat6 = float(1.0) / float(_InstanceCount);\n    u_xlat12 = u_xlat6 * 0.5;\n    u_xlat0.x = u_xlat0.x * u_xlat6 + u_xlat12;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat16_2.xyz = in_POSITION0.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat1.y = dot(u_xlat1, u_xlat16_2);\n    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat4 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_2);\n    u_xlat1.x = dot(u_xlat4, u_xlat16_2);\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    vs_TEXCOORD0.z = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat1.xy = vec2(vec2(_UvType, _UvType)) * u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat1.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    vs_TEXCOORD0.w = u_xlat0.x;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat16_2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat16_2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16_20 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_20 = inversesqrt(u_xlat16_20);\n    u_xlat16_0.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;\n    u_xlat16_2.x = u_xlat16_0.y * u_xlat16_0.y;\n    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat16_0.yzzx * u_xlat16_0.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_5.xyz;\n    u_xlat16_0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbvec2 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlatb0.xy = equal(vec4(vec4(_TextureMode, _TextureMode, _TextureMode, _TextureMode)), vec4(2.0, 3.0, 0.0, 0.0)).xy;\n    u_xlat16_1.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_1.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_1.x = u_xlat16_1.y + u_xlat16_1.x;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x));\n#else\n    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16_1.x);\n#endif\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_2.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_2.xxx : u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_3.xyz);\n    u_xlat16_0.w = u_xlat16_1.w * vs_COLOR0.w;\n    u_xlat16_3.w = (-u_xlat16_1.w);\n    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(_UseVertexColorToAlbedo);\n    SV_TARGET0.w = _UseVertexColorToAlbedo * u_xlat16_0.w + u_xlat16_1.w;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD1.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_17 = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_17 = min(u_xlat16_17, 1.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz + unity_FogColor.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_2.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_LOW _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 98\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 29\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 15%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    2.50   10.00    1.50       LS\nShortest path cycles:        2.50   10.00    1.50       LS\nLongest path cycles:         2.50   10.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 29\nUniform registers: 20\nStack spilling: false\n16-bit arithmetic: 37%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    1.12    0.00    0.88    1.00        A\nShortest path cycles:        1.12    0.00    0.88    1.00        A\nLongest path cycles:         1.12    0.00    0.88    1.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_23;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_37;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_32 = min(u_xlat16_32, 1.0);\n        u_xlat16_32 = (-u_xlat16_32) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_32);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_32 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_32) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_32 = min(u_xlat16_32, 1.0);\n            u_xlat16_32 = (-u_xlat16_32) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_32);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_32 = min(u_xlat16_32, 1.0);\n                u_xlat16_32 = (-u_xlat16_32) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_32);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_10.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_1.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_23 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);\n#else\n            u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n#endif\n            u_xlat16_23 = (-u_xlat16_23) + 1.0;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_33 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n                u_xlat16_8.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_8.xyz);\n                u_xlat16_33 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_3.y;\n                u_xlat16_33 = u_xlat16_33 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_33).xyz;\n                u_xlat16_8.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_8.xyz = (bool(u_xlatb5)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32);\n            u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);\n            u_xlat16_7.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_7.x = vs_TEXCOORD3.w;\n            u_xlat16_7.y = vs_TEXCOORD4.w;\n            u_xlat16_7.z = vs_TEXCOORD5.w;\n            u_xlat16_34 = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_34 = (-u_xlat16_34) + 1.0;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_37 = dot((-u_xlat16_7.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n                u_xlat16_7.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_7.xyz);\n                u_xlat16_37 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_13 = u_xlat16_3.y * u_xlat16_37;\n                u_xlat16_13 = u_xlat16_13 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13).xyz;\n                u_xlat16_7.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_7.xyz = (bool(u_xlatb5)) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_31);\n            u_xlat16_3.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_2.xyz = u_xlat16_0.yzw * u_xlat16_1.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 50\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    6.47    0.00    1.50    3.50        A\nShortest path cycles:        1.80    0.00    1.50    0.00        A\nLongest path cycles:         3.88    0.00    1.50    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_15;\nmediump float u_xlat16_27;\nbool u_xlatb36;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_38 = min(u_xlat16_38, 1.0);\n        u_xlat16_38 = (-u_xlat16_38) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_38);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_38 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_38) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_38 = min(u_xlat16_38, 1.0);\n            u_xlat16_38 = (-u_xlat16_38) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_38);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_38 = min(u_xlat16_38, 1.0);\n                u_xlat16_38 = (-u_xlat16_38) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_38);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_12.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb36)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_2.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_27 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_27 = max(u_xlat16_27, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_39 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_39 = (-u_xlat16_39) + 1.0;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_40 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_9.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_40 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_40 = u_xlat16_40 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_40).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27 + 1.0;\n            u_xlat16_27 = float(1.0) / float(u_xlat16_27);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_27);\n            u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_11.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_27 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);\n#else\n            u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n#endif\n            u_xlat16_27 = (-u_xlat16_27) + 1.0;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_39 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_39 = u_xlat16_39 + u_xlat16_39;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_39)) + (-u_xlat16_9.xyz);\n                u_xlat16_39 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_15 = u_xlat16_39 * u_xlat16_3.y;\n                u_xlat16_15 = u_xlat16_15 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_3.xyw = u_xlat16_9.xyz * u_xlat16_3.xxx;\n            u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyw * u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_1.yzw * u_xlat16_2.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 48\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.55    0.00    1.50    4.50        A\nShortest path cycles:        1.92    0.00    1.50    0.50        A\nLongest path cycles:         4.05    0.00    1.50    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_23;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_37;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_32 = min(u_xlat16_32, 1.0);\n        u_xlat16_32 = (-u_xlat16_32) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_32);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_32 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_32) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_32 = min(u_xlat16_32, 1.0);\n            u_xlat16_32 = (-u_xlat16_32) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_32);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_32 = min(u_xlat16_32, 1.0);\n                u_xlat16_32 = (-u_xlat16_32) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_32);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_10.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_1.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_23 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);\n#else\n            u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n#endif\n            u_xlat16_23 = (-u_xlat16_23) + 1.0;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_33 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n                u_xlat16_8.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_8.xyz);\n                u_xlat16_33 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_3.y;\n                u_xlat16_33 = u_xlat16_33 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_33).xyz;\n                u_xlat16_8.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_8.xyz = (bool(u_xlatb5)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32);\n            u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);\n            u_xlat16_7.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_7.x = vs_TEXCOORD3.w;\n            u_xlat16_7.y = vs_TEXCOORD4.w;\n            u_xlat16_7.z = vs_TEXCOORD5.w;\n            u_xlat16_34 = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_34 = (-u_xlat16_34) + 1.0;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_37 = dot((-u_xlat16_7.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n                u_xlat16_7.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_7.xyz);\n                u_xlat16_37 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_13 = u_xlat16_3.y * u_xlat16_37;\n                u_xlat16_13 = u_xlat16_13 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13).xyz;\n                u_xlat16_7.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_7.xyz = (bool(u_xlatb5)) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_31);\n            u_xlat16_3.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_2.xyz = u_xlat16_0.yzw * u_xlat16_1.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_11.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 56\nStack spilling: false\n16-bit arithmetic: 70%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    6.55    0.00    1.62    3.50        A\nShortest path cycles:        1.97    0.00    1.62    0.00        A\nLongest path cycles:         4.00    0.00    1.62    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_15;\nmediump float u_xlat16_27;\nbool u_xlatb36;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_38 = min(u_xlat16_38, 1.0);\n        u_xlat16_38 = (-u_xlat16_38) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_38);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_38 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_38) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_38 = min(u_xlat16_38, 1.0);\n            u_xlat16_38 = (-u_xlat16_38) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_38);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_38 = min(u_xlat16_38, 1.0);\n                u_xlat16_38 = (-u_xlat16_38) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_38);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_12.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb36)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_2.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_27 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_27 = max(u_xlat16_27, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_39 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_39 = (-u_xlat16_39) + 1.0;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_40 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_9.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_40 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_40 = u_xlat16_40 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_40).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27 + 1.0;\n            u_xlat16_27 = float(1.0) / float(u_xlat16_27);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_27);\n            u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_11.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_27 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);\n#else\n            u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n#endif\n            u_xlat16_27 = (-u_xlat16_27) + 1.0;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_39 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_39 = u_xlat16_39 + u_xlat16_39;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_39)) + (-u_xlat16_9.xyz);\n                u_xlat16_39 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_15 = u_xlat16_39 * u_xlat16_3.y;\n                u_xlat16_15 = u_xlat16_15 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_3.xyw = u_xlat16_9.xyz * u_xlat16_3.xxx;\n            u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyw * u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_1.yzw * u_xlat16_2.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_13.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_MEDIUM \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 39\nUniform registers: 56\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.38    0.00    1.62    4.50        A\nShortest path cycles:        2.00    0.00    1.62    0.50        A\nLongest path cycles:         4.13    0.00    1.62    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_23;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_37;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_32 = min(u_xlat16_32, 1.0);\n        u_xlat16_32 = (-u_xlat16_32) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_32);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_32 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_32) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_32 = min(u_xlat16_32, 1.0);\n            u_xlat16_32 = (-u_xlat16_32) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_32);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_32 = min(u_xlat16_32, 1.0);\n                u_xlat16_32 = (-u_xlat16_32) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_32);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_10.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_1.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_23 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);\n#else\n            u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n#endif\n            u_xlat16_23 = (-u_xlat16_23) + 1.0;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_33 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n                u_xlat16_8.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_8.xyz);\n                u_xlat16_33 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_3.y;\n                u_xlat16_33 = u_xlat16_33 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_33).xyz;\n                u_xlat16_8.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_8.xyz = (bool(u_xlatb5)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32);\n            u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);\n            u_xlat16_7.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_7.x = vs_TEXCOORD3.w;\n            u_xlat16_7.y = vs_TEXCOORD4.w;\n            u_xlat16_7.z = vs_TEXCOORD5.w;\n            u_xlat16_34 = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_34 = (-u_xlat16_34) + 1.0;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_37 = dot((-u_xlat16_7.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n                u_xlat16_7.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_7.xyz);\n                u_xlat16_37 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_13 = u_xlat16_3.y * u_xlat16_37;\n                u_xlat16_13 = u_xlat16_13 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13).xyz;\n                u_xlat16_7.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_7.xyz = (bool(u_xlatb5)) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_31);\n            u_xlat16_3.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_2.xyz = u_xlat16_0.yzw * u_xlat16_1.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 50\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    6.47    0.00    1.50    3.50        A\nShortest path cycles:        1.80    0.00    1.50    0.00        A\nLongest path cycles:         3.88    0.00    1.50    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_15;\nmediump float u_xlat16_27;\nbool u_xlatb36;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_38 = min(u_xlat16_38, 1.0);\n        u_xlat16_38 = (-u_xlat16_38) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_38);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_38 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_38) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_38 = min(u_xlat16_38, 1.0);\n            u_xlat16_38 = (-u_xlat16_38) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_38);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_38 = min(u_xlat16_38, 1.0);\n                u_xlat16_38 = (-u_xlat16_38) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_38);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_12.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb36)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_2.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_27 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_27 = max(u_xlat16_27, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_39 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_39 = (-u_xlat16_39) + 1.0;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_40 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_9.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_40 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_40 = u_xlat16_40 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_40).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27 + 1.0;\n            u_xlat16_27 = float(1.0) / float(u_xlat16_27);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_27);\n            u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_11.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_27 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);\n#else\n            u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n#endif\n            u_xlat16_27 = (-u_xlat16_27) + 1.0;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_39 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_39 = u_xlat16_39 + u_xlat16_39;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_39)) + (-u_xlat16_9.xyz);\n                u_xlat16_39 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_15 = u_xlat16_39 * u_xlat16_3.y;\n                u_xlat16_15 = u_xlat16_15 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_3.xyw = u_xlat16_9.xyz * u_xlat16_3.xxx;\n            u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyw * u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_1.yzw * u_xlat16_2.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 48\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.55    0.00    1.50    4.50        A\nShortest path cycles:        1.92    0.00    1.50    0.50        A\nLongest path cycles:         4.05    0.00    1.50    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_23;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_37;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_32 = min(u_xlat16_32, 1.0);\n        u_xlat16_32 = (-u_xlat16_32) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_32);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_32 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_32) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_32 = min(u_xlat16_32, 1.0);\n            u_xlat16_32 = (-u_xlat16_32) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_32);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_32 = min(u_xlat16_32, 1.0);\n                u_xlat16_32 = (-u_xlat16_32) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_32);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_10.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_1.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_23 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);\n#else\n            u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n#endif\n            u_xlat16_23 = (-u_xlat16_23) + 1.0;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n            u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_33 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n                u_xlat16_8.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_8.xyz);\n                u_xlat16_33 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_3.y;\n                u_xlat16_33 = u_xlat16_33 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_8.xyz, u_xlat16_33).xyz;\n                u_xlat16_8.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_8.xyz = (bool(u_xlatb5)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32);\n            u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_31);\n            u_xlat16_7.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz + u_xlat16_7.xyz;\n            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_31 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_32 = (-u_xlat16_31) + 1.0;\n            u_xlat16_4.xyz = u_xlat16_0.yzw * vec3(u_xlat16_31);\n            u_xlat16_7.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_31 = (-u_xlat16_3.y) + u_xlat16_32;\n            u_xlat16_31 = u_xlat16_31 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);\n#else\n            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n#endif\n            u_xlat16_32 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);\n            u_xlat16_7.x = vs_TEXCOORD3.w;\n            u_xlat16_7.y = vs_TEXCOORD4.w;\n            u_xlat16_7.z = vs_TEXCOORD5.w;\n            u_xlat16_34 = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_34 = (-u_xlat16_34) + 1.0;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n            u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_37 = dot((-u_xlat16_7.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n                u_xlat16_7.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_7.xyz);\n                u_xlat16_37 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_13 = u_xlat16_3.y * u_xlat16_37;\n                u_xlat16_13 = u_xlat16_13 * 6.0;\n                u_xlat16_15.xyz = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13).xyz;\n                u_xlat16_7.xyz = u_xlat16_15.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_7.xyz = (bool(u_xlatb5)) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_32 = u_xlat16_32 * u_xlat16_32 + 1.0;\n            u_xlat16_32 = float(1.0) / float(u_xlat16_32);\n            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_31);\n            u_xlat16_3.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;\n            u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_2.xyz = u_xlat16_0.yzw * u_xlat16_1.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_11.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_MEDIUM \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 56\nStack spilling: false\n16-bit arithmetic: 70%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    6.55    0.00    1.62    3.50        A\nShortest path cycles:        1.97    0.00    1.62    0.00        A\nLongest path cycles:         4.00    0.00    1.62    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_15;\nmediump float u_xlat16_27;\nbool u_xlatb36;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_38 = min(u_xlat16_38, 1.0);\n        u_xlat16_38 = (-u_xlat16_38) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_38);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_38 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_38) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_38 = min(u_xlat16_38, 1.0);\n            u_xlat16_38 = (-u_xlat16_38) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_38);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_38 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_38 = min(u_xlat16_38, 1.0);\n                u_xlat16_38 = (-u_xlat16_38) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_38);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_12.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb36)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_2.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_27 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_27 = max(u_xlat16_27, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_39 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_39 = (-u_xlat16_39) + 1.0;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_40 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_9.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_40 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_40 = u_xlat16_40 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_40).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27 + 1.0;\n            u_xlat16_27 = float(1.0) / float(u_xlat16_27);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_27);\n            u_xlat16_11.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_11.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_7.xyz;\n            break;\n        case 1:\n            u_xlat16_38 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_27 = (-u_xlat16_38) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_1.yzw * vec3(u_xlat16_38);\n            u_xlat16_8.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_38 = (-u_xlat16_3.y) + u_xlat16_27;\n            u_xlat16_38 = u_xlat16_38 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);\n#else\n            u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_27 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);\n#else\n            u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n#endif\n            u_xlat16_27 = (-u_xlat16_27) + 1.0;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n            u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb36){\n                u_xlat16_39 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_39 = u_xlat16_39 + u_xlat16_39;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_39)) + (-u_xlat16_9.xyz);\n                u_xlat16_39 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_15 = u_xlat16_39 * u_xlat16_3.y;\n                u_xlat16_15 = u_xlat16_15 * 6.0;\n                u_xlat16_10.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_15).xyz;\n                u_xlat16_9.xyz = u_xlat16_10.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_3.xyw = u_xlat16_9.xyz * u_xlat16_3.xxx;\n            u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_38);\n            u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyw * u_xlat16_8.xyz;\n            u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_1.yzw * u_xlat16_2.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_13.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_MEDIUM \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 39\nUniform registers: 56\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.38    0.00    1.62    4.50        A\nShortest path cycles:        2.00    0.00    1.62    0.50        A\nLongest path cycles:         4.13    0.00    1.62    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 61\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.80   12.00    1.88    4.00        A\nShortest path cycles:        1.88    0.00    1.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.92   12.00    1.88    4.50        A\nShortest path cycles:        1.92    0.00    1.88    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_16.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_16.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.75   12.00    2.00    4.00        A\nShortest path cycles:        1.97    0.00    2.00    0.00        V\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_19.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_19.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 66\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   13.22   12.00    2.00    4.50        A\nShortest path cycles:        2.05    0.00    2.00    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 61\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.80   12.00    1.88    4.00        A\nShortest path cycles:        1.88    0.00    1.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.92   12.00    1.88    4.50        A\nShortest path cycles:        1.92    0.00    1.88    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_16.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_16.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.75   12.00    2.00    4.00        A\nShortest path cycles:        1.97    0.00    2.00    0.00        V\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), vs_TEXCOORD3.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_19.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_19.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_MEDIUM _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 66\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   13.22   12.00    2.00    4.50        A\nShortest path cycles:        2.05    0.00    2.00    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_35 = min(u_xlat16_35, 1.0);\n        u_xlat16_35 = (-u_xlat16_35) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_35);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_35 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_35) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_35 = min(u_xlat16_35, 1.0);\n            u_xlat16_35 = (-u_xlat16_35) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_35);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_35 = min(u_xlat16_35, 1.0);\n                u_xlat16_35 = (-u_xlat16_35) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_35);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_11.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_25 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);\n#else\n            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n#endif\n            u_xlat16_25 = (-u_xlat16_25) + 1.0;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_36 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_36 = u_xlat16_36 + u_xlat16_36;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_36)) + (-u_xlat16_9.xyz);\n                u_xlat16_36 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_36 = u_xlat16_36 * u_xlat16_3.y;\n                u_xlat16_36 = u_xlat16_36 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36).xyz;\n                u_xlat16_9.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_35);\n            u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_34);\n            u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);\n#else\n            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n#endif\n            u_xlat16_37 = (-u_xlat16_37) + 1.0;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_40 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_8.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_14 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_14 = u_xlat16_14 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_14).xyz;\n                u_xlat16_1.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_34);\n            u_xlat16_3.xyz = vec3(u_xlat16_37) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 48\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.00    0.00    1.50    4.00        A\nShortest path cycles:        1.92    0.00    1.50    0.00        A\nLongest path cycles:         3.88    0.00    1.50    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_16;\nmediump float u_xlat16_29;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_41 = min(u_xlat16_41, 1.0);\n        u_xlat16_41 = (-u_xlat16_41) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_41);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_41 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_41) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_41 = min(u_xlat16_41, 1.0);\n            u_xlat16_41 = (-u_xlat16_41) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_41);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_41 = min(u_xlat16_41, 1.0);\n                u_xlat16_41 = (-u_xlat16_41) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_41);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_13.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_29 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_29 = max(u_xlat16_29, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);\n#else\n            u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n#endif\n            u_xlat16_42 = (-u_xlat16_42) + 1.0;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_43 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_43 = u_xlat16_43 + u_xlat16_43;\n                u_xlat16_10.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_43)) + (-u_xlat16_10.xyz);\n                u_xlat16_43 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_43 = u_xlat16_3.y * u_xlat16_43;\n                u_xlat16_43 = u_xlat16_43 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_43).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29 + 1.0;\n            u_xlat16_29 = float(1.0) / float(u_xlat16_29);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_29);\n            u_xlat16_12.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_12.xyz + u_xlat16_9.xyz;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);\n#else\n            u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n#endif\n            u_xlat16_29 = (-u_xlat16_29) + 1.0;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_42 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_42 = u_xlat16_42 + u_xlat16_42;\n                u_xlat16_2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_42)) + (-u_xlat16_10.xyz);\n                u_xlat16_42 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_16 = u_xlat16_42 * u_xlat16_3.y;\n                u_xlat16_16 = u_xlat16_16 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_16).xyz;\n                u_xlat16_2.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;\n            u_xlat16_3.xyw = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_3.xyz = vec3(u_xlat16_29) * u_xlat16_3.xyw + u_xlat16_9.xyz;\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_HIGH \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.55    0.00    1.50    4.50        A\nShortest path cycles:        1.97    0.00    1.50    0.50        A\nLongest path cycles:         4.00    0.00    1.50    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_35 = min(u_xlat16_35, 1.0);\n        u_xlat16_35 = (-u_xlat16_35) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_35);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_35 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_35) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_35 = min(u_xlat16_35, 1.0);\n            u_xlat16_35 = (-u_xlat16_35) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_35);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_35 = min(u_xlat16_35, 1.0);\n                u_xlat16_35 = (-u_xlat16_35) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_35);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_11.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_25 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);\n#else\n            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n#endif\n            u_xlat16_25 = (-u_xlat16_25) + 1.0;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_36 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_36 = u_xlat16_36 + u_xlat16_36;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_36)) + (-u_xlat16_9.xyz);\n                u_xlat16_36 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_36 = u_xlat16_36 * u_xlat16_3.y;\n                u_xlat16_36 = u_xlat16_36 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36).xyz;\n                u_xlat16_9.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_35);\n            u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_34);\n            u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);\n#else\n            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n#endif\n            u_xlat16_37 = (-u_xlat16_37) + 1.0;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_40 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_8.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_14 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_14 = u_xlat16_14 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_14).xyz;\n                u_xlat16_1.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_34);\n            u_xlat16_3.xyz = vec3(u_xlat16_37) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_12.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_12.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 70%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.08    0.00    1.62    4.00        A\nShortest path cycles:        2.05    0.00    1.62    0.00        A\nLongest path cycles:         3.92    0.00    1.62    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_29;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_41 = min(u_xlat16_41, 1.0);\n        u_xlat16_41 = (-u_xlat16_41) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_41);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_41 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_41) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_41 = min(u_xlat16_41, 1.0);\n            u_xlat16_41 = (-u_xlat16_41) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_41);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_41 = min(u_xlat16_41, 1.0);\n                u_xlat16_41 = (-u_xlat16_41) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_41);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_13.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_29 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_29 = max(u_xlat16_29, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);\n#else\n            u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n#endif\n            u_xlat16_42 = (-u_xlat16_42) + 1.0;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_43 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_43 = u_xlat16_43 + u_xlat16_43;\n                u_xlat16_10.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_43)) + (-u_xlat16_10.xyz);\n                u_xlat16_43 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_43 = u_xlat16_3.y * u_xlat16_43;\n                u_xlat16_43 = u_xlat16_43 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_43).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29 + 1.0;\n            u_xlat16_29 = float(1.0) / float(u_xlat16_29);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_29);\n            u_xlat16_12.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_12.xyz + u_xlat16_9.xyz;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);\n#else\n            u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n#endif\n            u_xlat16_29 = (-u_xlat16_29) + 1.0;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_42 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_42 = u_xlat16_42 + u_xlat16_42;\n                u_xlat16_2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_42)) + (-u_xlat16_10.xyz);\n                u_xlat16_42 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_16 = u_xlat16_42 * u_xlat16_3.y;\n                u_xlat16_16 = u_xlat16_16 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_16).xyz;\n                u_xlat16_2.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;\n            u_xlat16_3.xyw = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_3.xyz = vec3(u_xlat16_29) * u_xlat16_3.xyw + u_xlat16_9.xyz;\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_14.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_14.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_HIGH \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 41\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.25    0.00    1.62    4.50        A\nShortest path cycles:        2.05    0.00    1.62    0.50        A\nLongest path cycles:         3.97    0.00    1.62    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_35 = min(u_xlat16_35, 1.0);\n        u_xlat16_35 = (-u_xlat16_35) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_35);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_35 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_35) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_35 = min(u_xlat16_35, 1.0);\n            u_xlat16_35 = (-u_xlat16_35) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_35);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_35 = min(u_xlat16_35, 1.0);\n                u_xlat16_35 = (-u_xlat16_35) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_35);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_11.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_25 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);\n#else\n            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n#endif\n            u_xlat16_25 = (-u_xlat16_25) + 1.0;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_36 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_36 = u_xlat16_36 + u_xlat16_36;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_36)) + (-u_xlat16_9.xyz);\n                u_xlat16_36 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_36 = u_xlat16_36 * u_xlat16_3.y;\n                u_xlat16_36 = u_xlat16_36 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36).xyz;\n                u_xlat16_9.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_35);\n            u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_34);\n            u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);\n#else\n            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n#endif\n            u_xlat16_37 = (-u_xlat16_37) + 1.0;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_40 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_8.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_14 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_14 = u_xlat16_14 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_14).xyz;\n                u_xlat16_1.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_34);\n            u_xlat16_3.xyz = vec3(u_xlat16_37) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 48\nStack spilling: false\n16-bit arithmetic: 71%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.00    0.00    1.50    4.00        A\nShortest path cycles:        1.92    0.00    1.50    0.00        A\nLongest path cycles:         3.88    0.00    1.50    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_16;\nmediump float u_xlat16_29;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_41 = min(u_xlat16_41, 1.0);\n        u_xlat16_41 = (-u_xlat16_41) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_41);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_41 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_41) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_41 = min(u_xlat16_41, 1.0);\n            u_xlat16_41 = (-u_xlat16_41) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_41);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_41 = min(u_xlat16_41, 1.0);\n                u_xlat16_41 = (-u_xlat16_41) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_41);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_13.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_29 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_29 = max(u_xlat16_29, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);\n#else\n            u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n#endif\n            u_xlat16_42 = (-u_xlat16_42) + 1.0;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_43 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_43 = u_xlat16_43 + u_xlat16_43;\n                u_xlat16_10.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_43)) + (-u_xlat16_10.xyz);\n                u_xlat16_43 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_43 = u_xlat16_3.y * u_xlat16_43;\n                u_xlat16_43 = u_xlat16_43 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_43).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29 + 1.0;\n            u_xlat16_29 = float(1.0) / float(u_xlat16_29);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_29);\n            u_xlat16_12.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_12.xyz + u_xlat16_9.xyz;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);\n#else\n            u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n#endif\n            u_xlat16_29 = (-u_xlat16_29) + 1.0;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_42 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_42 = u_xlat16_42 + u_xlat16_42;\n                u_xlat16_2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_42)) + (-u_xlat16_10.xyz);\n                u_xlat16_42 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_16 = u_xlat16_42 * u_xlat16_3.y;\n                u_xlat16_16 = u_xlat16_16 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_16).xyz;\n                u_xlat16_2.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;\n            u_xlat16_3.xyw = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_3.xyz = vec3(u_xlat16_29) * u_xlat16_3.xyw + u_xlat16_9.xyz;\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 46\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.55    0.00    1.50    4.50        A\nShortest path cycles:        1.97    0.00    1.50    0.50        A\nLongest path cycles:         4.00    0.00    1.50    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nbool u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_35 = min(u_xlat16_35, 1.0);\n        u_xlat16_35 = (-u_xlat16_35) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_35);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_35 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_35) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_35 = min(u_xlat16_35, 1.0);\n            u_xlat16_35 = (-u_xlat16_35) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_35);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_35 = min(u_xlat16_35, 1.0);\n                u_xlat16_35 = (-u_xlat16_35) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_35);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_11.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_25 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);\n#else\n            u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n#endif\n            u_xlat16_25 = (-u_xlat16_25) + 1.0;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n            u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_36 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_36 = u_xlat16_36 + u_xlat16_36;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_36)) + (-u_xlat16_9.xyz);\n                u_xlat16_36 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_36 = u_xlat16_36 * u_xlat16_3.y;\n                u_xlat16_36 = u_xlat16_36 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36).xyz;\n                u_xlat16_9.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_35);\n            u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_34);\n            u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_10.xyz + u_xlat16_8.xyz;\n            u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_34 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_35 = (-u_xlat16_34) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_34);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_34 = (-u_xlat16_3.y) + u_xlat16_35;\n            u_xlat16_34 = u_xlat16_34 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);\n#else\n            u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n#endif\n            u_xlat16_35 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_35 = max(u_xlat16_35, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);\n#else\n            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n#endif\n            u_xlat16_37 = (-u_xlat16_37) + 1.0;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n            u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb5){\n                u_xlat16_40 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_40 = u_xlat16_40 + u_xlat16_40;\n                u_xlat16_1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_40)) + (-u_xlat16_8.xyz);\n                u_xlat16_40 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_14 = u_xlat16_3.y * u_xlat16_40;\n                u_xlat16_14 = u_xlat16_14 * 6.0;\n                u_xlat16_16.xyz = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_14).xyz;\n                u_xlat16_1.xyz = u_xlat16_16.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_1.xyz = (bool(u_xlatb5)) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_35 = u_xlat16_35 * u_xlat16_35 + 1.0;\n            u_xlat16_35 = float(1.0) / float(u_xlat16_35);\n            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n            u_xlat16_8.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_34);\n            u_xlat16_3.xyz = vec3(u_xlat16_37) * u_xlat16_8.xyz + u_xlat16_3.xzw;\n            u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;\n            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_12.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_12.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_HIGH \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 31\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 70%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.08    0.00    1.62    4.00        A\nShortest path cycles:        2.05    0.00    1.62    0.00        A\nLongest path cycles:         3.92    0.00    1.62    1.50        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_29;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_41 = min(u_xlat16_41, 1.0);\n        u_xlat16_41 = (-u_xlat16_41) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_41);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_41 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_41) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_41 = min(u_xlat16_41, 1.0);\n            u_xlat16_41 = (-u_xlat16_41) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_41);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_41 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_41 = min(u_xlat16_41, 1.0);\n                u_xlat16_41 = (-u_xlat16_41) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_41);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_13.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_29 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_29 = max(u_xlat16_29, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);\n#else\n            u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n#endif\n            u_xlat16_42 = (-u_xlat16_42) + 1.0;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n            u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_43 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_43 = u_xlat16_43 + u_xlat16_43;\n                u_xlat16_10.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_43)) + (-u_xlat16_10.xyz);\n                u_xlat16_43 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_43 = u_xlat16_3.y * u_xlat16_43;\n                u_xlat16_43 = u_xlat16_43 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_43).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29 + 1.0;\n            u_xlat16_29 = float(1.0) / float(u_xlat16_29);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_29);\n            u_xlat16_12.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_12.xyz + u_xlat16_9.xyz;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_9.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_8.xyz;\n            break;\n        case 1:\n            u_xlat16_41 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_29 = (-u_xlat16_41) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_41);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_41 = (-u_xlat16_3.y) + u_xlat16_29;\n            u_xlat16_41 = u_xlat16_41 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);\n#else\n            u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n#endif\n            u_xlat16_3.x = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);\n#else\n            u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n#endif\n            u_xlat16_29 = (-u_xlat16_29) + 1.0;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n            u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections));\n#else\n            u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_EnvironmentReflections);\n#endif\n            if(u_xlatb39){\n                u_xlat16_42 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_42 = u_xlat16_42 + u_xlat16_42;\n                u_xlat16_2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_42)) + (-u_xlat16_10.xyz);\n                u_xlat16_42 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_16 = u_xlat16_42 * u_xlat16_3.y;\n                u_xlat16_16 = u_xlat16_16 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_16).xyz;\n                u_xlat16_2.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_2.xyz = (bool(u_xlatb39)) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n            u_xlat16_3.x = float(1.0) / float(u_xlat16_3.x);\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;\n            u_xlat16_3.xyw = (-u_xlat16_9.xyz) + vec3(u_xlat16_41);\n            u_xlat16_3.xyz = vec3(u_xlat16_29) * u_xlat16_3.xyw + u_xlat16_9.xyz;\n            u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_14.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_14.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_HIGH \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 41\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 67%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    7.25    0.00    1.62    4.50        A\nShortest path cycles:        2.05    0.00    1.62    0.50        A\nLongest path cycles:         3.97    0.00    1.62    2.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 61\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.80   12.00    1.88    4.00        A\nShortest path cycles:        1.88    0.00    1.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 94\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 86\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.47   19.00    0.00       LS\nShortest path cycles:        2.80   18.00    0.00       LS\nLongest path cycles:         3.50   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.92   12.00    1.88    4.50        A\nShortest path cycles:        1.92    0.00    1.88    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_16.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_16.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.75   12.00    2.00    4.00        A\nShortest path cycles:        1.97    0.00    2.00    0.00        V\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb27){\n        u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat3.xyz = vec3(u_xlat29) * u_xlat3.xyz;\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_5.x = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_5.y = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_5.z = dot(u_xlat4.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat16_5.xyz;\n        u_xlat6.xyz = u_xlat3.zxy * u_xlat4.yzx;\n        u_xlat6.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat3.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat27 = max(u_xlat27, 1.17549435e-38);\n        u_xlat27 = inversesqrt(u_xlat27);\n        u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n        u_xlat16_32 = dot(u_xlat3.xyz, u_xlat3.xyz);\n        u_xlat16_32 = inversesqrt(u_xlat16_32);\n        u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat16_32);\n        u_xlat16_4.x = float(0.0);\n        u_xlat16_4.y = float(0.0);\n        u_xlat16_4.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat27 = u_xlat1.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat0.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_32 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_32 = u_xlat3.x * u_xlat3.x + (-u_xlat16_32);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.z = u_xlat27;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_19.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_19.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: FOG_EXP MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 100\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    0.00       LS\nShortest path cycles:        0.92    1.00    0.00       LS\nLongest path cycles:         0.92    1.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.55   19.00    0.00       LS\nShortest path cycles:        2.83   18.00    0.00       LS\nLongest path cycles:         3.58   19.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 66\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   13.22   12.00    2.00    4.50        A\nShortest path cycles:        2.05    0.00    2.00    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 61\nUniform registers: 54\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.80   12.00    1.88    4.00        A\nShortest path cycles:        1.88    0.00    1.88    0.00        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = 0.0;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 90\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 82\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.58   19.00    1.50       LS\nShortest path cycles:        2.92   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.92   12.00    1.88    4.50        A\nShortest path cycles:        1.92    0.00    1.88    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(4) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nint u_xlati5;\nbvec2 u_xlatb5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nint u_xlati11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_18;\nmediump float u_xlat16_20;\nvec3 u_xlat26;\nmediump vec3 u_xlat16_26;\nuint u_xlatu26;\nfloat u_xlat28;\nmediump float u_xlat16_33;\nfloat u_xlat35;\nint u_xlati35;\nbvec2 u_xlatb35;\nmediump float u_xlat16_41;\nfloat u_xlat43;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nuint u_xlatu50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nfloat u_xlat56;\nfloat u_xlat58;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_47 = min(u_xlat16_47, 1.0);\n        u_xlat16_47 = (-u_xlat16_47) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_47);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_47 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_47) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_47 = min(u_xlat16_47, 1.0);\n            u_xlat16_47 = (-u_xlat16_47) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_47);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_47 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_47 = min(u_xlat16_47, 1.0);\n                u_xlat16_47 = (-u_xlat16_47) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_47);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_15.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_0 = vec4(_UseVertexColorToAlbedo) * u_xlat16_0.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_1.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_1.xyz;\n    u_xlat16_1.xyz = (u_xlatb5.x) ? u_xlat16_1.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat16_1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat16_1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat16_1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_8.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_47 = (-u_xlat16_3.y) + u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_33 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_33 = max(u_xlat16_33, 6.10351563e-05);\n            u_xlat16_48 = u_xlat16_33 * u_xlat16_33;\n            u_xlat16_5 = u_xlat16_33 * 4.0 + 2.0;\n            u_xlat16_20 = u_xlat16_33 * u_xlat16_33 + -1.0;\n            u_xlat16_9.x = vs_TEXCOORD3.w;\n            u_xlat16_9.y = vs_TEXCOORD4.w;\n            u_xlat16_9.z = vs_TEXCOORD5.w;\n            u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n            u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n            u_xlat16_49 = (-u_xlat16_49) + 1.0;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n            u_xlatb35.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _SpecularHighlights)).xy;\n            if(u_xlatb35.x){\n                u_xlat16_52 = dot((-u_xlat16_9.xyz), u_xlat16_1.xyz);\n                u_xlat16_52 = u_xlat16_52 + u_xlat16_52;\n                u_xlat16_10.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_52)) + (-u_xlat16_9.xyz);\n                u_xlat16_52 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_52 = u_xlat16_3.y * u_xlat16_52;\n                u_xlat16_52 = u_xlat16_52 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_52).xyz;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_10.xyz = (u_xlatb35.x) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_33 = u_xlat16_33 * u_xlat16_33 + 1.0;\n            u_xlat16_33 = float(1.0) / float(u_xlat16_33);\n            u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_33);\n            u_xlat16_12.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_47);\n            u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_12.xyz + u_xlat16_8.xyz;\n            u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_10.xyz;\n            u_xlat16_47 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati35 = int(u_xlat16_47);\n            u_xlat16_4.xyz = u_xlat16_7.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb11 = !!(u_xlati16_6>=u_xlati35);\n#else\n                u_xlatb11 = u_xlati16_6>=u_xlati35;\n#endif\n                if(u_xlatb11){break;}\n                u_xlati11 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu26 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu26)], ImmCB_0_0_0[u_xlati11]);\n                u_xlati11 = int(u_xlat16_47);\n                u_xlat26.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati11].www + _AdditionalLightsPosition[u_xlati11].xyz;\n                u_xlat13.x = dot(u_xlat26.xyz, u_xlat26.xyz);\n                u_xlat13.x = max(u_xlat13.x, 6.10351563e-05);\n                u_xlat28 = inversesqrt(u_xlat13.x);\n                u_xlat14.xyz = u_xlat26.xyz * vec3(u_xlat28);\n                u_xlat43 = float(1.0) / float(u_xlat13.x);\n                u_xlat13.x = u_xlat13.x * _AdditionalLightsAttenuation[u_xlati11].x + _AdditionalLightsAttenuation[u_xlati11].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);\n#else\n                u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n#endif\n                u_xlat13.x = u_xlat13.x * u_xlat43;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati11].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati11].z + _AdditionalLightsAttenuation[u_xlati11].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat13.x = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_10.xyz = u_xlat26.xyz * vec3(u_xlat28) + u_xlat16_9.xyz;\n                u_xlat16_26.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n                u_xlat16_26.x = max(u_xlat16_26.x, 1.17549435e-38);\n                u_xlat16_26.x = inversesqrt(u_xlat16_26.x);\n                u_xlat16_26.xyz = u_xlat16_10.xyz * u_xlat16_26.xxx;\n                u_xlat16_33 = dot(u_xlat14.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);\n#else\n                u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n#endif\n                u_xlat16_49 = dot(u_xlat16_1.xyz, u_xlat16_26.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);\n#else\n                u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);\n#endif\n                u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n                u_xlat16_26.x = u_xlat16_49 * u_xlat16_20 + 1.00001001;\n                u_xlat16_26.x = u_xlat16_26.x * u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n                u_xlat16_41 = max(u_xlat16_33, 0.100000001);\n                u_xlat16_26.x = u_xlat16_41 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_5 * u_xlat16_26.x;\n                u_xlat16_26.x = u_xlat16_48 / u_xlat16_26.x;\n                u_xlat16_33 = u_xlat16_26.x + -6.10351563e-05;\n                u_xlat16_33 = max(u_xlat16_33, 0.0);\n                u_xlat16_33 = min(u_xlat16_33, 100.0);\n                u_xlat16_10.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33);\n                u_xlat16_10.xyz = (u_xlatb35.y) ? u_xlat16_10.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_47 = u_xlat16_47 * u_xlat13.x;\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * _AdditionalLightsColor[u_xlati11].xyz;\n                u_xlat16_10.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46) + u_xlat16_10.xyz;\n                u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_4.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            break;\n        case 1:\n            u_xlat16_46 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_47 = (-u_xlat16_46) + 1.0;\n            u_xlat16_7.xyz = u_xlat16_0.yzw * vec3(u_xlat16_46);\n            u_xlat16_8.xyz = u_xlat16_0.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_46 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_47 = u_xlat16_47 + u_xlat16_46;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n            u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n            u_xlat16_49 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_49 = max(u_xlat16_49, 6.10351563e-05);\n            u_xlat16_8.x = vs_TEXCOORD3.w;\n            u_xlat16_8.y = vs_TEXCOORD4.w;\n            u_xlat16_8.z = vs_TEXCOORD5.w;\n            u_xlat16_52 = dot(u_xlat16_1.xyz, u_xlat16_8.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);\n#else\n            u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);\n#endif\n            u_xlat16_52 = (-u_xlat16_52) + 1.0;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlat16_52 = u_xlat16_52 * u_xlat16_52;\n            u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb5.x){\n                u_xlat16_53 = dot((-u_xlat16_8.xyz), u_xlat16_1.xyz);\n                u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n                u_xlat16_9.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_8.xyz);\n                u_xlat16_53 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_18 = u_xlat16_3.y * u_xlat16_53;\n                u_xlat16_18 = u_xlat16_18 * 6.0;\n                u_xlat16_11.xyz = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_18).xyz;\n                u_xlat16_9.xyz = u_xlat16_11.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_9.xyz = (u_xlatb5.x) ? u_xlat16_9.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_18 = u_xlat16_49 * u_xlat16_49 + 1.0;\n            u_xlat16_18 = float(1.0) / float(u_xlat16_18);\n            u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_18);\n            u_xlat16_10.xyz = (-u_xlat16_3.xzw) + vec3(u_xlat16_47);\n            u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz + u_xlat16_3.xzw;\n            u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_10.xyz;\n            u_xlat16_7.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat16_9.xyz;\n            u_xlat16_47 = u_xlat16_46 * u_xlat16_46;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n            u_xlat16_47 = u_xlat16_47 * 1000.09998;\n            u_xlat16_18 = (-u_xlat16_46) + 1.0;\n            u_xlat16_49 = (-u_xlat16_46) + u_xlat16_18;\n            u_xlat16_46 = dot(vec2(u_xlat16_18), vec2(u_xlat16_46));\n            u_xlat16_46 = u_xlat16_49 * 2.0 + u_xlat16_46;\n            u_xlat16_18 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati5 = int(u_xlat16_18);\n            u_xlat16_11.xyz = vec3(u_xlat16_47) * u_xlat16_3.xzw;\n            u_xlat16_3.x = float(0.0);\n            u_xlat16_3.y = float(0.0);\n            u_xlat16_3.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb35.x = !!(u_xlati16_6>=u_xlati5);\n#else\n                u_xlatb35.x = u_xlati16_6>=u_xlati5;\n#endif\n                if(u_xlatb35.x){break;}\n                u_xlati35 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu50 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_47 = dot(unity_LightIndices[int(u_xlatu50)], ImmCB_0_0_0[u_xlati35]);\n                u_xlati35 = int(u_xlat16_47);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati35].www + _AdditionalLightsPosition[u_xlati35].xyz;\n                u_xlat50 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat50 = max(u_xlat50, 6.10351563e-05);\n                u_xlat56 = inversesqrt(u_xlat50);\n                u_xlat14.xyz = vec3(u_xlat56) * u_xlat13.xyz;\n                u_xlat58 = float(1.0) / float(u_xlat50);\n                u_xlat50 = u_xlat50 * _AdditionalLightsAttenuation[u_xlati35].x + _AdditionalLightsAttenuation[u_xlati35].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat50 = min(max(u_xlat50, 0.0), 1.0);\n#else\n                u_xlat50 = clamp(u_xlat50, 0.0, 1.0);\n#endif\n                u_xlat50 = u_xlat50 * u_xlat58;\n                u_xlat16_47 = dot(_AdditionalLightsSpotDir[u_xlati35].xyz, u_xlat14.xyz);\n                u_xlat16_47 = u_xlat16_47 * _AdditionalLightsAttenuation[u_xlati35].z + _AdditionalLightsAttenuation[u_xlati35].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n                u_xlat50 = u_xlat16_47 * u_xlat50;\n                u_xlat16_10.xyz = vec3(u_xlat50) * _AdditionalLightsColor[u_xlati35].xyz;\n                u_xlat16_47 = dot(u_xlat16_1.xyz, u_xlat14.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);\n#else\n                u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_10.xyz * vec3(u_xlat16_47) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * vec3(u_xlat56) + u_xlat16_8.xyz;\n                u_xlat35 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat35 = max(u_xlat35, 1.17549435e-38);\n                u_xlat35 = inversesqrt(u_xlat35);\n                u_xlat13.xyz = vec3(u_xlat35) * u_xlat13.xyz;\n                u_xlat35 = dot(u_xlat16_1.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat35 = min(max(u_xlat35, 0.0), 1.0);\n#else\n                u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n#endif\n                u_xlat16_47 = log2(u_xlat35);\n                u_xlat16_47 = u_xlat16_46 * u_xlat16_47;\n                u_xlat16_47 = exp2(u_xlat16_47);\n                u_xlat16_12.xyz = vec3(u_xlat16_47) * u_xlat16_11.xyz;\n                u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz + u_xlat16_3.xyz;\n                u_xlat16_3.xyz = (u_xlatb5.y) ? u_xlat16_10.xyz : u_xlat16_3.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_0.yzw + u_xlat16_7.xyz;\n            u_xlat16_4.xyz = u_xlat16_3.xyz + u_xlat16_1.xyz;\n            break;\n        case 2:\n            u_xlat16_4.xyz = u_xlat16_0.yzw * u_xlat16_2.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_0.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_16.xyz = u_xlat16_4.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_16.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 56%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   12.75   12.00    2.00    4.00        A\nShortest path cycles:        1.97    0.00    2.00    0.00        V\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(5) uniform mediump sampler2D _Properties;\nin mediump vec3 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin mediump vec4 in_TANGENT0;\nin mediump vec4 in_COLOR0;\nin mediump vec2 in_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat18;\nfloat u_xlat28;\nbool u_xlatb28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = float(1.0) / float(_InstanceCount);\n    u_xlat9 = float(uint(gl_InstanceID));\n    u_xlat18 = u_xlat0.x * 0.5;\n    u_xlat0.x = u_xlat9 * u_xlat0.x + u_xlat18;\n    u_xlat0.y = float(0.125);\n    u_xlat0.z = float(0.375);\n    u_xlat0.w = float(0.625);\n    u_xlat1 = textureLod(_Properties, u_xlat0.yx, 0.0);\n    u_xlat2 = textureLod(_Properties, u_xlat0.zx, 0.0);\n    u_xlat0 = textureLod(_Properties, u_xlat0.wx, 0.0);\n    u_xlat16_3.xyz = in_POSITION0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat1.x = dot(u_xlat1, u_xlat16_3);\n    u_xlat1.y = dot(u_xlat2, u_xlat16_3);\n    u_xlat1.z = dot(u_xlat0, u_xlat16_3);\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    if(u_xlatb28){\n        u_xlat28 = in_TANGENT0.w * unity_WorldTransformParams.w;\n        u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;\n        u_xlat16_3.x = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;\n        u_xlat16_3.y = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;\n        u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;\n        u_xlat5.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;\n        u_xlat16_3.z = dot(u_xlat5.xyz, in_TANGENT0.xyz);\n        u_xlat29 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat29 = max(u_xlat29, 1.17549435e-38);\n        u_xlat29 = inversesqrt(u_xlat29);\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_3.xyz;\n        u_xlat6.xyz = u_xlat4.zxy * u_xlat5.yzx;\n        u_xlat6.xyz = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat6.xyz);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat16_3.xyz = u_xlat4.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_6.xyz = u_xlat6.xyz;\n    } else {\n        u_xlat7.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n        u_xlat7.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n        u_xlat7.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = max(u_xlat28, 1.17549435e-38);\n        u_xlat28 = inversesqrt(u_xlat28);\n        u_xlat4.xyz = vec3(u_xlat28) * u_xlat7.xyz;\n        u_xlat16_30 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat16_30 = inversesqrt(u_xlat16_30);\n        u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n        u_xlat16_5.x = float(0.0);\n        u_xlat16_5.y = float(0.0);\n        u_xlat16_5.z = float(0.0);\n        u_xlat16_6.x = float(0.0);\n        u_xlat16_6.y = float(0.0);\n        u_xlat16_6.z = float(0.0);\n    }\n    u_xlat28 = u_xlat0.z * unity_FogParams.x;\n    u_xlat7.xy = u_xlat1.xz + (-in_TEXCOORD0.xy);\n    u_xlat7.xy = vec2(vec2(_UvType, _UvType)) * u_xlat7.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD0.xy = u_xlat7.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat16_7 = u_xlat4.yzzx * u_xlat4.xyzz;\n    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_7);\n    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_7);\n    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_7);\n    u_xlat16_30 = u_xlat4.y * u_xlat4.y;\n    u_xlat16_30 = u_xlat4.x * u_xlat4.x + (-u_xlat16_30);\n    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat16_30) + u_xlat16_8.xyz;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.z = u_xlat28;\n    vs_TEXCOORD0.w = u_xlat2.x;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD2.w = u_xlat2.y;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.x;\n    vs_TEXCOORD4.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD4.w = u_xlat2.y;\n    vs_TEXCOORD5.xyz = u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = u_xlat2.z;\n    return;\n}", "frag": "#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_0_0_0[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 unity_FogColor;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _NormalMetallicRoughness;\nin mediump vec4 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump int u_xlati16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nint u_xlati11;\nbvec2 u_xlatb11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_13;\nuint u_xlatu13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nmediump vec3 u_xlat16_19;\nmediump float u_xlat16_21;\nmediump float u_xlat16_31;\nvec3 u_xlat33;\nmediump float u_xlat16_39;\nint u_xlati47;\nbool u_xlatb47;\nmediump float u_xlat16_54;\nint u_xlati54;\nbool u_xlatb54;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nmediump float u_xlat16_58;\nfloat u_xlat59;\nmediump float u_xlat16_59;\nint u_xlati59;\nbool u_xlatb59;\nmediump float u_xlat16_61;\nmediump float u_xlat16_62;\nfloat u_xlat65;\nuint u_xlatu65;\nfloat u_xlat67;\nfloat u_xlat69;\nvoid main()\n{\n\tImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);\n\tImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);\n\tImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);\n\tImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb0 = !!(_TextureMode==2.0);\n#else\n    u_xlatb0 = _TextureMode==2.0;\n#endif\n    if(u_xlatb0){\n        u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n        u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;\n        u_xlat16_1.xyz = u_xlat16_1.xxx * _BaseColor.xyz;\n        u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n        u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n        u_xlat16_56 = min(u_xlat16_56, 1.0);\n        u_xlat16_56 = (-u_xlat16_56) + 1.0;\n        u_xlat16_2.z = sqrt(u_xlat16_56);\n        u_xlat16_1.w = _BaseColor.w;\n        u_xlat16_3.x = _Metallic;\n        u_xlat16_3.y = u_xlat16_0.w;\n    } else {\n#ifdef UNITY_ADRENO_ES3\n        u_xlatb0 = !!(_TextureMode==3.0);\n#else\n        u_xlatb0 = _TextureMode==3.0;\n#endif\n        if(u_xlatb0){\n            u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n            u_xlat16_56 = u_xlat16_0.x * u_xlat16_0.x;\n            u_xlat16_1.xyz = vec3(u_xlat16_56) * _BaseColor.xyz;\n            u_xlat16_2.xy = u_xlat16_0.yz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n            u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n            u_xlat16_56 = min(u_xlat16_56, 1.0);\n            u_xlat16_56 = (-u_xlat16_56) + 1.0;\n            u_xlat16_2.z = sqrt(u_xlat16_56);\n            u_xlat16_1.w = u_xlat16_0.w * _BaseColor.w;\n            u_xlat16_3.xy = vec2(_Metallic, _Roughness);\n        } else {\n#ifdef UNITY_ADRENO_ES3\n            u_xlatb0 = !!(_TextureMode==1.0);\n#else\n            u_xlatb0 = _TextureMode==1.0;\n#endif\n            if(u_xlatb0){\n                u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                u_xlat16_1 = u_xlat16_0 * _BaseColor;\n                u_xlat16_0 = texture(_NormalMetallicRoughness, vs_TEXCOORD0.xy);\n                u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n                u_xlat16_56 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n                u_xlat16_56 = min(u_xlat16_56, 1.0);\n                u_xlat16_56 = (-u_xlat16_56) + 1.0;\n                u_xlat16_2.z = sqrt(u_xlat16_56);\n                u_xlat16_3.xy = u_xlat16_0.zw;\n            } else {\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb0 = !!(_TextureMode==0.0);\n#else\n                u_xlatb0 = _TextureMode==0.0;\n#endif\n                if(u_xlatb0){\n                    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy);\n                    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n#ifdef UNITY_ADRENO_ES3\n                    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n                    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n                    if(u_xlatb0){\n                        u_xlat16_18.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;\n                        u_xlat16_4.xyz = u_xlat16_18.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n                    }\n                    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : vec3(0.0, 0.0, 1.0);\n                    u_xlat16_3.y = 1.0;\n                } else {\n                    u_xlat16_1.x = float(0.0);\n                    u_xlat16_1.y = float(0.0);\n                    u_xlat16_1.z = float(0.0);\n                    u_xlat16_1.w = float(0.0);\n                    u_xlat16_3.y = 0.0;\n                    u_xlat16_2.x = float(0.0);\n                    u_xlat16_2.y = float(0.0);\n                    u_xlat16_2.z = float(0.0);\n                }\n                u_xlat16_3.x = 0.0;\n            }\n        }\n    }\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _EmissionColor.xyz;\n    u_xlat16_4 = u_xlat16_1 * vs_COLOR0 + (-u_xlat16_1);\n    u_xlat16_1 = vec4(_UseVertexColorToAlbedo) * u_xlat16_4.wxyz + u_xlat16_1.wxyz;\n#ifdef UNITY_ADRENO_ES3\n    u_xlatb54 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive));\n#else\n    u_xlatb54 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_IsNormalMapActive);\n#endif\n    u_xlat16_4.xyz = u_xlat16_2.yyy * vs_TEXCOORD5.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD4.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.zzz * vs_TEXCOORD3.xyz + u_xlat16_2.xyw;\n    u_xlat16_2.xyz = (bool(u_xlatb54)) ? u_xlat16_2.xyz : vs_TEXCOORD3.xyz;\n    u_xlat16_2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat16_2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlati16_6 = int(_LightingType);\n    switch(u_xlati16_6){\n        case 0:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_39 = (-u_xlat16_3.y) + u_xlat16_39;\n            u_xlat16_39 = u_xlat16_39 + 1.0;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n            u_xlat16_57 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_57 = max(u_xlat16_57, 6.10351563e-05);\n            u_xlat16_58 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_54 = u_xlat16_57 * 4.0 + 2.0;\n            u_xlat16_59 = u_xlat16_57 * u_xlat16_57 + -1.0;\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n            u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n            u_xlat16_61 = (-u_xlat16_61) + 1.0;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_62 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_62 = u_xlat16_62 + u_xlat16_62;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_62)) + (-u_xlat16_10.xyz);\n                u_xlat16_62 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_62 = u_xlat16_3.y * u_xlat16_62;\n                u_xlat16_62 = u_xlat16_62 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_62).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57 + 1.0;\n            u_xlat16_57 = float(1.0) / float(u_xlat16_57);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57);\n            u_xlat16_14.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_39);\n            u_xlat16_14.xyz = vec3(u_xlat16_61) * u_xlat16_14.xyz + u_xlat16_9.xyz;\n            u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n            u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_12.xyz;\n            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati11 = int(u_xlat16_39);\n            u_xlat16_12.xyz = u_xlat16_8.xyz;\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb47 = !!(u_xlati16_6>=u_xlati11);\n#else\n                u_xlatb47 = u_xlati16_6>=u_xlati11;\n#endif\n                if(u_xlatb47){break;}\n                u_xlati47 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu65 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_39 = dot(unity_LightIndices[int(u_xlatu65)], ImmCB_0_0_0[u_xlati47]);\n                u_xlati47 = int(u_xlat16_39);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati47].www + _AdditionalLightsPosition[u_xlati47].xyz;\n                u_xlat65 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat65 = max(u_xlat65, 6.10351563e-05);\n                u_xlat67 = inversesqrt(u_xlat65);\n                u_xlat15.xyz = vec3(u_xlat67) * u_xlat13.xyz;\n                u_xlat69 = float(1.0) / float(u_xlat65);\n                u_xlat65 = u_xlat65 * _AdditionalLightsAttenuation[u_xlati47].x + _AdditionalLightsAttenuation[u_xlati47].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat65 = min(max(u_xlat65, 0.0), 1.0);\n#else\n                u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n#endif\n                u_xlat65 = u_xlat65 * u_xlat69;\n                u_xlat16_39 = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat15.xyz);\n                u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n                u_xlat65 = u_xlat16_39 * u_xlat65;\n                u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat15.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);\n#else\n                u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n#endif\n                u_xlat16_14.xyz = u_xlat13.xyz * vec3(u_xlat67) + u_xlat16_10.xyz;\n                u_xlat16_13.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n                u_xlat16_13.x = max(u_xlat16_13.x, 1.17549435e-38);\n                u_xlat16_13.x = inversesqrt(u_xlat16_13.x);\n                u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_14.xyz;\n                u_xlat16_57 = dot(u_xlat15.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_61 = dot(u_xlat16_2.xyz, u_xlat16_13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_61 = min(max(u_xlat16_61, 0.0), 1.0);\n#else\n                u_xlat16_61 = clamp(u_xlat16_61, 0.0, 1.0);\n#endif\n                u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n                u_xlat16_13.x = u_xlat16_61 * u_xlat16_59 + 1.00001001;\n                u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat16_31 = max(u_xlat16_57, 0.100000001);\n                u_xlat16_13.x = u_xlat16_31 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_54 * u_xlat16_13.x;\n                u_xlat16_13.x = u_xlat16_58 / u_xlat16_13.x;\n                u_xlat16_57 = u_xlat16_13.x + -6.10351563e-05;\n                u_xlat16_57 = max(u_xlat16_57, 0.0);\n                u_xlat16_57 = min(u_xlat16_57, 100.0);\n                u_xlat16_14.xyz = u_xlat16_9.xyz * vec3(u_xlat16_57);\n                u_xlat16_14.xyz = (u_xlatb11.y) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n                u_xlat16_39 = u_xlat16_39 * u_xlat65;\n                u_xlat16_16.xyz = vec3(u_xlat16_39) * _AdditionalLightsColor[u_xlati47].xyz;\n                u_xlat16_14.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56) + u_xlat16_14.xyz;\n                u_xlat16_12.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz + u_xlat16_12.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_12.xyz;\n            break;\n        case 1:\n            u_xlat16_56 = (-u_xlat16_3.x) * 0.959999979 + 0.959999979;\n            u_xlat16_39 = (-u_xlat16_56) + 1.0;\n            u_xlat16_8.xyz = u_xlat16_1.yzw * vec3(u_xlat16_56);\n            u_xlat16_9.xyz = u_xlat16_1.yzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n            u_xlat16_9.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n            u_xlat16_56 = (-u_xlat16_3.y) + 1.0;\n            u_xlat16_3.x = u_xlat16_39 + u_xlat16_56;\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);\n#else\n            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n#endif\n            u_xlat16_39 = u_xlat16_3.y * u_xlat16_3.y;\n            u_xlat16_39 = max(u_xlat16_39, 6.10351563e-05);\n            u_xlat16_10.x = vs_TEXCOORD3.w;\n            u_xlat16_10.y = vs_TEXCOORD4.w;\n            u_xlat16_10.z = vs_TEXCOORD5.w;\n            u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat16_10.xyz);\n#ifdef UNITY_ADRENO_ES3\n            u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n            u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n            u_xlat16_57 = (-u_xlat16_57) + 1.0;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlatb11.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_EnvironmentReflections, _SpecularHighlights, _EnvironmentReflections, _EnvironmentReflections)).xy;\n            if(u_xlatb11.x){\n                u_xlat16_58 = dot((-u_xlat16_10.xyz), u_xlat16_2.xyz);\n                u_xlat16_58 = u_xlat16_58 + u_xlat16_58;\n                u_xlat16_12.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_58)) + (-u_xlat16_10.xyz);\n                u_xlat16_58 = (-u_xlat16_3.y) * 0.699999988 + 1.70000005;\n                u_xlat16_21 = u_xlat16_3.y * u_xlat16_58;\n                u_xlat16_21 = u_xlat16_21 * 6.0;\n                u_xlat16_13.xyz = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_21).xyz;\n                u_xlat16_12.xyz = u_xlat16_13.xyz * unity_SpecCube0_HDR.xxx;\n            }\n            u_xlat16_12.xyz = (u_xlatb11.x) ? u_xlat16_12.xyz : vec3(0.0, 0.0, 0.0);\n            u_xlat16_21 = u_xlat16_39 * u_xlat16_39 + 1.0;\n            u_xlat16_21 = float(1.0) / float(u_xlat16_21);\n            u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_21);\n            u_xlat16_3.xyz = (-u_xlat16_9.xyz) + u_xlat16_3.xxx;\n            u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat16_9.xyz;\n            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz;\n            u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n            u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n            u_xlat16_57 = u_xlat16_57 * 1000.09998;\n            u_xlat16_58 = (-u_xlat16_56) + 1.0;\n            u_xlat16_61 = (-u_xlat16_56) + u_xlat16_58;\n            u_xlat16_56 = dot(vec2(u_xlat16_58), vec2(u_xlat16_56));\n            u_xlat16_56 = u_xlat16_61 * 2.0 + u_xlat16_56;\n            u_xlat16_58 = min(_AdditionalLightsCount.x, unity_LightData.y);\n            u_xlati54 = int(u_xlat16_58);\n            u_xlat16_11.xzw = vec3(u_xlat16_57) * u_xlat16_9.xyz;\n            u_xlat16_8.x = float(0.0);\n            u_xlat16_8.y = float(0.0);\n            u_xlat16_8.z = float(0.0);\n            u_xlat16_9.x = float(0.0);\n            u_xlat16_9.y = float(0.0);\n            u_xlat16_9.z = float(0.0);\n            u_xlati16_6 = 0;\n            while(true){\n#ifdef UNITY_ADRENO_ES3\n                u_xlatb59 = !!(u_xlati16_6>=u_xlati54);\n#else\n                u_xlatb59 = u_xlati16_6>=u_xlati54;\n#endif\n                if(u_xlatb59){break;}\n                u_xlati59 = int(uint(uint(u_xlati16_6) & 3u));\n                u_xlatu13 = uint(uint(u_xlati16_6) >> 2u);\n                u_xlat16_57 = dot(unity_LightIndices[int(u_xlatu13)], ImmCB_0_0_0[u_xlati59]);\n                u_xlati59 = int(u_xlat16_57);\n                u_xlat13.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPosition[u_xlati59].www + _AdditionalLightsPosition[u_xlati59].xyz;\n                u_xlat67 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat67 = max(u_xlat67, 6.10351563e-05);\n                u_xlat15.x = inversesqrt(u_xlat67);\n                u_xlat33.xyz = u_xlat13.xyz * u_xlat15.xxx;\n                u_xlat17 = float(1.0) / float(u_xlat67);\n                u_xlat67 = u_xlat67 * _AdditionalLightsAttenuation[u_xlati59].x + _AdditionalLightsAttenuation[u_xlati59].y;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat67 = min(max(u_xlat67, 0.0), 1.0);\n#else\n                u_xlat67 = clamp(u_xlat67, 0.0, 1.0);\n#endif\n                u_xlat67 = u_xlat67 * u_xlat17;\n                u_xlat16_57 = dot(_AdditionalLightsSpotDir[u_xlati59].xyz, u_xlat33.xyz);\n                u_xlat16_57 = u_xlat16_57 * _AdditionalLightsAttenuation[u_xlati59].z + _AdditionalLightsAttenuation[u_xlati59].w;\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n                u_xlat67 = u_xlat16_57 * u_xlat67;\n                u_xlat16_12.xyz = vec3(u_xlat67) * _AdditionalLightsColor[u_xlati59].xyz;\n                u_xlat16_57 = dot(u_xlat16_2.xyz, u_xlat33.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);\n#else\n                u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n#endif\n                u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_57) + u_xlat16_9.xyz;\n                u_xlat13.xyz = u_xlat13.xyz * u_xlat15.xxx + u_xlat16_10.xyz;\n                u_xlat59 = dot(u_xlat13.xyz, u_xlat13.xyz);\n                u_xlat59 = max(u_xlat59, 1.17549435e-38);\n                u_xlat59 = inversesqrt(u_xlat59);\n                u_xlat13.xyz = vec3(u_xlat59) * u_xlat13.xyz;\n                u_xlat59 = dot(u_xlat16_2.xyz, u_xlat13.xyz);\n#ifdef UNITY_ADRENO_ES3\n                u_xlat59 = min(max(u_xlat59, 0.0), 1.0);\n#else\n                u_xlat59 = clamp(u_xlat59, 0.0, 1.0);\n#endif\n                u_xlat16_57 = log2(u_xlat59);\n                u_xlat16_57 = u_xlat16_56 * u_xlat16_57;\n                u_xlat16_57 = exp2(u_xlat16_57);\n                u_xlat16_14.xyz = vec3(u_xlat16_57) * u_xlat16_11.xzw;\n                u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n                u_xlat16_8.xyz = (u_xlatb11.y) ? u_xlat16_12.xyz : u_xlat16_8.xyz;\n                u_xlati16_6 = u_xlati16_6 + 1;\n            }\n            u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_1.yzw + u_xlat16_3.xyz;\n            u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;\n            u_xlat16_7.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n            break;\n        case 2:\n            u_xlat16_7.xyz = u_xlat16_1.yzw * u_xlat16_4.xyz + u_xlat16_5.xyz;\n            break;\n        default:\n            break;\n    }\n    SV_TARGET0.w = u_xlat16_1.x;\n    u_xlat16_1.x = exp2((-vs_TEXCOORD0.z));\n    u_xlat16_1.x = min(u_xlat16_1.x, 1.0);\n    u_xlat16_19.xyz = u_xlat16_7.xyz + (-unity_FogColor.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_19.xyz + unity_FogColor.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    SV_TARGET0.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0));\n    return;\n}", "name": "Global Keywords: CUSTOM_INSTANCING_ENABLED FOG_EXP MATERIAL_QUALITY_HIGH _ADDITIONAL_LIGHTS \nLocal Keywords: _EMISSION ", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 22\nUniform registers: 92\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.92    1.00    1.50        T\nShortest path cycles:        0.92    1.00    1.50        T\nLongest path cycles:         0.92    1.00    1.50        T\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 30\nUniform registers: 84\nStack spilling: false\n16-bit arithmetic: 3%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    4.63   19.00    1.50       LS\nShortest path cycles:        2.97   18.00    1.50       LS\nLongest path cycles:         3.63   19.00    1.50       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 63\nUniform registers: 66\nStack spilling: false\n16-bit arithmetic: 54%\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:   13.22   12.00    2.00    4.50        A\nShortest path cycles:        2.05    0.00    2.00    0.50        A\nLongest path cycles:          N/A     N/A     N/A     N/A      N/A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n#ifdef UNITY_ADRENO_ES3\n    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);\n#else\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n#endif\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}", "name": "Global Keywords: <none>\nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 28\nUniform registers: 78\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    1.83    2.00    0.00       LS\nShortest path cycles:        1.83    2.00    0.00       LS\nLongest path cycles:         1.83    2.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 9\nUniform registers: 64\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.04    3.00    0.00       LS\nShortest path cycles:        0.04    3.00    0.00       LS\nLongest path cycles:         0.04    3.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 18\nUniform registers: 0\nStack spilling: false\n16-bit arithmetic: N/A\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.12    0.00    0.00    0.00        A\nShortest path cycles:        0.12    0.00    0.00    0.00        A\nLongest path cycles:         0.12    0.00    0.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: false\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}, {"py/object": "imports.compiled_shader_to_json.Shader", "vert": "#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 1\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _CustomLightmapColor;\n\tUNITY_UNIFORM mediump vec4 _BaseMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionMap_ST;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _DetailRougnhessIntensity;\n\tUNITY_UNIFORM mediump float _IsNormalMapActive;\n\tUNITY_UNIFORM mediump float _EnvironmentReflections;\n\tUNITY_UNIFORM mediump float _SpecularHighlights;\n\tUNITY_UNIFORM mediump float _UseVertexColorToAlbedo;\n\tUNITY_UNIFORM mediump float _TextureMode;\n\tUNITY_UNIFORM mediump float _EmissionSelectType;\n\tUNITY_UNIFORM mediump float _DetailMapUvType;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _DetailMapScale;\n\tUNITY_UNIFORM mediump float _DetailLuminanceIntensity;\n\tUNITY_UNIFORM mediump float _DetailNormalIntensity;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _Roughness;\n\tUNITY_UNIFORM mediump float _UvType;\n\tUNITY_UNIFORM float _InstanceCount;\n\tUNITY_UNIFORM mediump float _LightingType;\n\tUNITY_UNIFORM mediump float _Surface;\n\tUNITY_UNIFORM mediump float _AlphaClip;\n\tUNITY_UNIFORM mediump float _Cutoff;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}", "frag": "#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}", "name": "Global Keywords: <none>\nLocal Keywords: <none>", "result_vert": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Vertex\n\nMain shader\n===========\n\nPosition variant\n----------------\n\nWork registers: 21\nUniform registers: 58\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    1.21    1.00    0.00        A\nShortest path cycles:        1.21    1.00    0.00        A\nLongest path cycles:         1.21    1.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nVarying variant\n---------------\n\nWork registers: 9\nUniform registers: 50\nStack spilling: false\n16-bit arithmetic: 0%\n\n                                A      LS       T    Bound\nTotal instruction cycles:    0.04    3.00    0.00       LS\nShortest path cycles:        0.04    3.00    0.00       LS\nLongest path cycles:         0.04    3.00    0.00       LS\n\nA = Arithmetic, LS = Load/Store, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: true\n", "result_frag": "Mali Offline Compiler v7.4.0 (Build 330167)\nCopyright 2007-2021 Arm Limited, all rights reserved\n\nConfiguration\n=============\n\nHardware: Mali-G76 r0p0\nArchitecture: Bifrost\nDriver: r32p0-00rel0\nShader type: OpenGL ES Fragment\n\nMain shader\n===========\n\nWork registers: 18\nUniform registers: 0\nStack spilling: false\n16-bit arithmetic: N/A\n\n                                A      LS       V       T    Bound\nTotal instruction cycles:    0.12    0.00    0.00    0.00        A\nShortest path cycles:        0.12    0.00    0.00    0.00        A\nLongest path cycles:         0.12    0.00    0.00    0.00        A\n\nA = Arithmetic, LS = Load/Store, V = Varying, T = Texture\n\nShader properties\n=================\n\nHas uniform computation: false\nHas side-effects: false\nModifies coverage: false\nUses late ZS test: false\nUses late ZS update: false\nReads color buffer: false\n\nNote: This tool shows only the shader-visible property state.\nAPI configuration may also impact the value of some properties.\n"}]